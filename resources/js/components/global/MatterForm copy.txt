<template>

<div :id="id" :class="modal ? 'modal': ''">
    
    <div :class="modal ? 'modal-dialog modal-dialog-centered modal-lgr' : ''">

        <div :class="modal ? 'modal-content matters-border':'card h-100 border-0'">

            <div :class="modal ? '':'card-header'">

                <div :class="modal ? 'modal-header matters-bg' : 'd-flex justify-content-between'">

                    <div class="page-title">
                        <h3>
                            <span v-if="!editing">Matter will be Added</span>
                            <span v-else v-html="pageTitle()"></span>
                        </h3>
                        <i v-if="modal" title="Close this window" class="cp top-right fa fa-times-circle fa-2x text-white" data-dismiss="modal"></i>
                    </div>

                    <page-close-button v-if="!modal" @closeClicked="closeForm"/>

                </div>

            </div>

            <div class="card-body form-tab-body p-3" :style="modal ? 'height:70vh' : ''">

                <form-tabs :tabs="tabs"/>

                <div v-show="activeTab === 'General'" class="form-tab-content">

                    <fieldset><legend>Client</legend>

                        <div class="form-group row">

                            <text-input 
                                _class="col-md-8" 
                                :value="clientName" 
                                :readOnly="true" 
                                label="Name"
                                popOver="<h4>Client</h4>
                                        <p>The Client's Code and Name</p>"
                            />

                            <div class="col-md-4">

                                <label>Instructed</label>

                                <pop-over content="
                                <h4>Date Instructed</h4>
                                <p>This is the date the Client instructed the Company and the Matter was opened.</p>
                                <p>This can be useful to track Matters which are taking a long time or have had no activity for a long period.</p>
                                "/>
                                <date-picker :readOnly="record.readOnly ? true: false" ref="datePickerComponent" v-model="record.formatteddateinstructed" :config="$root.datePickerOptions"/>
                                <div v-show="errors.instructed" v-html="errors.instructed" class="invalid-feedback"></div>

                            </div>


                            <select-matter-client
                                :id="id + '-select-matter-client'"
                                _class="col-md-6"
                                label="Client"
                                :formControls="false"
                                :readOnly="editing"
                                title="The Client this Matter belongs to"
                                :ref="uniqueId + '-select-matter-client'"
                                :formRef="uniqueId + '-select-matter-client'"
                                singular="Client"
                                plural="Clients"
                            />
                        </div>          



                        <div class="form-group row">

                            <text-input 
                                _class="col-md-6" 
                                v-model="record.theirref" 
                                label="Their Reference"
                                popOver="<h4>Their Reference</h4>
                                    <p>The client's reference for this Matter</p>"
                            />

                            <text-input 
                                _class="col-md-6" 
                                v-model="record.alternateref" 
                                label="Alternate Ref"
                                popOver="<h4>Alt Ref</h4>
                                    <p>An alternate reference for this Matter.</p>
                                    <p>This field can be used to link to other programs or as a reference to your previous system.</p>"
                            />
                        </div>

                        <div class="form-group row">
                            <select-client-fee-sheet
                                :id="id + '-select-client-feesheet'"
                                callback="clientFeeSheetSelected"
                                parentName="selectClientFeeSheet"
                                _class="col-md-6"
                                popOver="<h4>Fee Sheet</h4><p>The Fee Sheet used to bill the Client.</p>"
                                title="The Fee Sheet used to bill the Client"
                                :ref="uniqueId + '-matter-select-client-feesheet'" 
                                :form-ref="uniqueId + '-matter-select-client-feesheet'"
                                :error="errors.clientfeesheetid"
                            />

                            <div class="col-md-6">

                                <label v-text="'Fee Posting'" style="margin-bottom: 0.6rem !important;"/>

                                <pop-over content="
                                <h4>Fee Posting</h4>
                                <p>If Fees are <em>on hold</em>, no Fee Notes for this Matter will be posted to Accounting.</p>
                                <p>This can be useful if the Client will only be billed at a later date (e.g. when the Matter is finalized).</p>
                                "/>


                                <b-form-checkbox
                                    :id="id + '-feenotes-onhold'"
                                    v-model="record.feenotesonhold"
                                    name="feeNotesOnHold"
                                    value="1"
                                    unchecked-value="0"
                                    switch 
                                    size="lg"
                                    >
                                    Fees are on hold
                                </b-form-checkbox>

                            </div>
                        </div>


                    </fieldset> 

                    <fieldset class="mt-3"><legend>Matter</legend>

                        <div class="form-group row">

                            <text-input _class="col-md-4" 
                            v-model="record.fileref" 
                            :required="true" 
                            name="fileref" 
                            label="File Ref"
                            popOver="<h4>File Ref</h4>
                                    <p>The Code assigned to the Matter</p>
                                    <p>This is your reference to this Matter</p>"
                            :error="errors.fileref"/>

                        </div>

                        <div class="form-group row">
                            
                            <text-input 
                            _class="col-md-12" 
                            v-model="record.description" 
                            :required="true" 
                            name="description" 
                            label="Description"
                            popOver="<h4>Description</h4>
                                    <p>A general description of the Matter</p>"
                            :error="errors.description"/>

                        </div>

                        <div class="row">

                            <div class="col-md-6">

                                <div class="form-group row">
                                    <select-employee
                                        :id="id + '-select-employee'"
                                        _class="col-md-12"
                                        popOver="<h4>Belongs To</h4>
                                        <p>The Employee who 'owns' this Matter</p>"
                                        label="Belongs To"
                                        :ref="uniqueId + '-select-employee'" 
                                        :formRef="uniqueId + '-select-employee'"
                                        :error="errors.employeeid"
                                    />                        
                                </div>

                                <div class="form-group row">
                                    <select-matter-type
                                        :id="id + '-select-matter-type'"
                                        _class="col-md-12"
                                        popOver="<h4>Matter Type</h4><p>The <em>Matter Type</em> indicates the <em>general</em> category this Matter falls under and what area of law may apply to it.</p>"
                                        title="The type of Matter"
                                        :ref="uniqueId + '-select-matter-type'" 
                                        :form-ref="uniqueId + '-select-matter-type'"
                                        :error="errors.mattertypeid"
                                    />

                                </div>    

                                <div class="form-group row">

                                    <select-document-set
                                        :id="id + '-select-document-set'"
                                        _class="col-md-12"
                                        popOver="<h4>Document Set</h4><p>The <em>Document Set</em> defines the <em>specific</em> area of law this Matter is involved in and the Document Templates it uses to assemble Documents.</p>"
                                        title="The Documents used by this Matter"
                                        :ref="uniqueId + '-select-document-set'" 
                                        :form-ref="uniqueId + '-select-document-set'"
                                        :error="errors.docgenid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <select-language
                                        :id="id + '-select-language'"
                                        _class="col-md-12"
                                        popOver="<h4>Language</h4><p>The <em>Language</em> the documents will be produced in.</p>"
                                        title="The Language used by this Matter"
                                        :ref="uniqueId + '-select-language'" 
                                        :form-ref="uniqueId + '-select-language'"
                                        :error="errors.documentlanguageid"
                                    />

                                </div>

                            </div>

                            <div class="col-md-6">

                                <div v-show="showStages() === true" class="form-group row">

                                    <select-stage-group
                                        :id="id + '-select-stage-group'"
                                        _class="col-md-12"
                                        popOver="<h4>Stage</h4>
                                        <p>The (default) group of Stages used by this Matter. These Stages will be displayed when selecting a Stage for this Matter.</p>"
                                        title="The (default) group of Stages used by this Matter"
                                        :ref="uniqueId + '-select-stage-group'" 
                                        :form-ref="uniqueId + '-select-stage-group'"
                                        :error="errors.stagegroupid"
                                    />

                                </div>

                                <div v-show="showPlanOfAction() === true" class="form-group row">

                                    <select-plan-of-action
                                        :id="id + '-select-plan-of-action'"
                                        _class="col-md-12"
                                        popOver="<h4>Plan Of Action</h4>
                                        <p>The pre-defined Reminders for this Matter.</p>"
                                        title="The pre-defined Reminders for this Matter"
                                        :ref="uniqueId + '-select-plan-of-action'" 
                                        :form-ref="uniqueId + '-select-plan-of-action'"
                                        :error="errors.todogroupid"
                                    />

                                </div>

                                <div v-show="showExtraScreen() === true" class="form-group row">

                                    <select-extra-screen
                                        :id="id + '-select-extra-screen'"
                                        _class="col-md-12"
                                        popOver="<h4>Extra Screen</h4>
                                        <p>The <em>Matter Take On</em> screen for this Matter.</p>"
                                        title="The Matter Take On screen for this Matter"
                                        screenType="M"
                                        :ref="uniqueId + '-select-extra-screen'" 
                                        :form-ref="uniqueId + '-select-extra-screen'"
                                        :error="errors.extrascreenid"
                                    />

                                </div>

                                <div v-show="showCauseOfAction() === true" class="form-group row">

                                    <select-cause-of-action
                                        :id="id + '-select-cause-of-action'"
                                        _class="col-md-12"
                                        popOver="<h4>Cause Of Action</h4>
                                        <p>The reason the property is being transfered.</p>"
                                        title="The reason the property is being transfered"
                                        :ref="uniqueId + '-select-cause-of-action'" 
                                        :form-ref="uniqueId + '-select-cause-of-action'"
                                        :error="errors.bondcauseid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <select-branch
                                        :id="id + '-select-branch'"
                                        :checkBox="true"
                                        _class="col-md-12"
                                        popOver="<h4>Branch</h4><p>A Matter may belong to a separate <em>Branch</em> within the Company.</p><p>Matters can be filtered by Branch to show Matters that belong to a certain Branch for reporting and accounting purposes.</p>"
                                        title="The Branch the Matter belongs to"
                                        :ref="uniqueId + '-matter-select-branch'" 
                                        :form-ref="uniqueId + '-matter-select-branch'"
                                        :error="errors.branchid"
                                    />

                                </div>

                            </div>

                        </div>

                    </fieldset> 

                </div>  

                <div v-show="activeTab === 'Parties'" class="form-tab-content">

                    <matter-parties
                        :ref="uniqueId + '-matter-parties'"
                        :uniqueId="uniqueId"
                    />

                </div>  

                <div v-show="activeTab === 'Accounting'" class="form-tab-content">

                    <div class="row">

                        <div class="col-xxl-6">

                            <fieldset><legend>Settings</legend>

                                <div class="form-group row">

                                    <select-cost-centre
                                        :id="id + '-select-cost-centre'"
                                        _class="col-md-12"
                                        popOver="<h4>Cost Centre</h4>
                                        <p>Fees for this matter will be grouped by this Cost Centre.</p>"
                                        title="Fees for this matter will be grouped by this Cost Centre"
                                        :ref="uniqueId + '-select-cost-centre'" 
                                        :form-ref="uniqueId + '-select-cost-centre'"
                                        :error="errors.costcentreid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <select-accounts-language
                                        :id="id + '-select-accounts-language'"
                                        label="Accounts Language"
                                        callback="accountsLanguageSelected"
                                        parentName="selectAccountsLanguage"
                                        _class="col-md-12"
                                        popOver="<h4>Accounts Language</h4>
                                        <p>The <em>Language</em> in which any Accounting documents will be printed.</p>"
                                        :ref="uniqueId + '-select-accounts-language'" 
                                        :form-ref="uniqueId + '-select-accounts-language'"
                                        :error="errors.accountslanguageid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <select-trust-bank
                                        :id="id + '-select-trust-bank'"
                                        label="Trust Bank"
                                        callback="trustBankSelected"
                                        parentName="selectTrustBank"
                                        category="trustBankAccounts"
                                        _class="col-md-12"
                                        popOver="<h4>Trust Bank</h4>
                                        <p>The default Trust Bank account used by this Matter</p>"
                                        :ref="uniqueId + '-select-trust-bank'" 
                                        :form-ref="uniqueId + '-select-trust-bank'"
                                        :error="errors.trustbankid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <select-business-bank
                                        :id="id + '-select-business-bank'"
                                        label="Business Bank"
                                        callback="businessBankSelected"
                                        parentName="selectBusinessBank"
                                        category="businessBankAccounts"
                                        _class="col-md-12"
                                        popOver="<h4>Business Bank</h4>
                                        <p>The default Business Bank Account used by this Matter</p>"
                                        :ref="uniqueId + '-select-business-bank'" 
                                        :form-ref="uniqueId + '-select-business-bank'"
                                        :error="errors.businessbankid"
                                    />

                                </div>

                            </fieldset>

                            <fieldset class="mt-3"><legend>Collection Commission</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Matter</label>
                                        <pop-over content="
                                                <h4>Collection Commission for the Matter</h4>
                                                <p>Charge a Fee for money recovered from the Debtor only (i.e. not the Client)</p>
                                            "/>
                                        <v-select
                                            title="Charge a Fee for money recovered from the Debtor only (i.e. not the Client)"
                                            :options="collCommOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="collCommOptions => collCommOptions.value"
                                            v-model="record.collcommoption"
                                        />
                                        
                                        <div v-if="errors.collcommoption" v-html="errors.collcommoption[0]" class="invalid-feedback"></div>

                                    </div>

                                    <div class="mt-4 col-md-4">

                                        <b-form-checkbox
                                            :id="id + '-admin-fee'"
                                            v-model="record.collcommsplitflag"
                                            name="AdminFee"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                        >
                                            <span>Split?</span> 
                                            <pop-over content="
                                                <h4>Split</h4>
                                                <p>Collection commission will be displayed as 2 entries The 1st portion will be the debtors percent The 2nd portion will be the remaining percentage.</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>

                                </div> 
                                
                                <div class="form-group row">

                                    <text-input inputGroup="%" _class="col-md-5" type="number" input-class="form-input-number" v-model="record.collcommpercent" name="collcommpercent" title="Collection Commission" :error="errors.collcommpercent"/>

                                    <text-input _class="col-md-3" type="number" input-class="form-input-number" v-model="record.collcommlimit" name="collcommlimit" title="Maximum Collection Commission To Charge" :error="errors.collcommlimit"/>
                                </div> 

                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Debtor</label>
                                        <pop-over content="
                                                <h4>Collection Commission for the Debtor</h4>
                                                <p>Charge the debtor a collection commision fee for money recovered from the debtor.</p>
                                            "/>
                                        <v-select
                                            title="Charge the debtor a collection commision fee for money recovered from the debtor"
                                            :options="debtorCollCommOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="debtorCollCommOptions => debtorCollCommOptions.value"
                                            v-model="record.debtorcollcommoption"
                                        />
                                        
                                        <div v-if="errors.debtorcollcommoption" v-html="errors.debtorcollcommoption[0]" class="invalid-feedback"></div>

                                    </div>

                                </div> 

                                <div class="form-group row">

                                    <text-input inputGroup="%" _class="col-md-5" type="number" input-class="form-input-number" v-model="record.debtorcollcommpercent" name="debtorcollcommpercent" title="Collection Commission" :error="errors.debtorcollcommpercent"/>

                                    <text-input _class="col-md-3" type="number" input-class="form-input-number" v-model="record.debtorcollcommlimit" name="debtorcollcommlimit" title="Maximum Collection Commission To Charge" :error="errors.debtorcollcommlimit"/>
                                </div> 

                            </fieldset>


                        </div>

                        <div class="col-xxl-6 mt-xl-3 mt-xxl-0">

                            <fieldset><legend>Income Allocation</legend>

                                <div class="row mb-2">
                                    <div class="col-md-12">
                                        <div>The Default Income Account For This Matter</div>
                                        <div v-show="record.overrideincomeaccflag == '0' || !record.overrideincomeaccflag">will be assigned by the Cost Centre's Income Account</div>
                                        <div v-show="record.overrideincomeaccflag == '1'">will always use the following Account</div>
                                    </div>
                                </div>


                                <div class="row">
                                    <div class="col-md-12" title="Force all fees to be posted to a specific Income Account">
                                        <b-form-checkbox
                                            :id="id + '-override-income-account'"
                                            
                                            v-model="record.overrideincomeaccflag"
                                            name="OverrideIncomeAccFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            Post all Fees for this Matter to this Income Account?
                                        </b-form-checkbox>
                                    </div>
                                </div>



                                <div class="form-group row">

                                    <select-income-account
                                        :id="id + '-select-income-account'"
                                        label="Default Income Account"
                                        callback="incomeAccountSelected"
                                        parentName="selectIncomeAccount"
                                        category="incomeAccounts"
                                        _class="col-md-12"
                                        popOver="<h4>Default Income Account</h4>
                                        <p>The Income Account the Fees will be posted to.</p>"
                                        :ref="uniqueId + '-select-income-account'" 
                                        :readOnly="record.overrideincomeaccflag == '0' ? true : false" 
                                        :form-ref="uniqueId + '-select-income-account'"
                                        :error="errors.incomeaccid"
                                    />

                                </div>

                            </fieldset>
                            
                            <fieldset class="mt-3"><legend>Receipting</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">

                                        <label>Type</label>
                                        <pop-over content="
                                            <h4>Receipting Type</h4>
                                            <p>Specify how Receipts are handled for this Matter</p>
                                            "/>
                                        <v-select
                                            title="Specify how Receipts are handled for this Matter"
                                            :options="receiptingOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="receiptingOptions => receiptingOptions.value"
                                            v-model="record.receiptoption"
                                        />

                                        <div v-if="errors.receiptoption" v-html="errors.receiptoption[0]" class="invalid-feedback"></div>

                                    </div>

                                    <text-input v-show="record.receiptoption == 4 || record.receiptoption == 5 " inputGroup="%" _class="col-md-4" type="number" input-class="form-input-number" v-model="record.receiptpercent" name="receiptpercent" title="The Amount Percent Receipts are limited to" :error="errors.receiptpercent"/>

                                </div>

                                <div class="form-group row">

                                    <text-input v-show="record.receiptoption == 2 || record.receiptoption == 5 " label="Amount" _class="col-md-8" type="number" input-class="form-input-number" v-model="record.receiptamount" name="receiptamount" title="The Amount Receipts are limited to" :error="errors.receiptamount"/>

                                    <text-input v-show="record.receiptoption == 3 " :readOnly="true" label="Claim Amount" _class="col-md-8" type="number" input-class="form-input-number" v-model="record.claimamount" name="claimamount" title="The Claim Amount for this Receipt" :error="errors.claimamount"/>

                                </div>
                                
                            </fieldset>

                            <fieldset class="mt-3"><legend>Options</legend>
                                
                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Agents Allowance</label>
                                        <pop-over content="
                                            <h4>Agents Allowance</h4>
                                            <p>Charge Agents Allowance on fees</p>
                                            "/>
                                        <v-select
                                            title="Charge Agents Allowance on fees"
                                            :options="agentOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="agentOptions => agentOptions.value"
                                            v-model="record.agentflag"
                                        />
                                        
                                        <div v-if="errors.agentflag" v-html="errors.agentflag[0]" class="invalid-feedback"></div>

                                    </div>

                                    <text-input v-show="record.agentflag == 1 || record.agentflag == 2 " inputGroup="%" _class="mt-4 col-md-4" type="number" input-class="form-input-number" v-model="record.agentpercent" name="agentpercent" title="Charge Agents Allowance on this Matter at this rate" :error="errors.agentpercent"/>

                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">

                                        <b-form-checkbox
                                            :id="id + '-admin-fee'"
                                            v-model="record.adminfeeflag"
                                            name="AdminFee"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                        >
                                            <span>Charge Admin Fee</span> 
                                            <pop-over content="
                                                <h4>Charge Admin Fee</h4>
                                                <p>Charge the Client a monthly Admin Fee if there is any financial movement on this Matter?</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">

                                        


                                        <b-form-checkbox
                                            :id="id + '-interest'"
                                            v-model="record.interestflag"
                                            name="Interest"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Charge Interest</span>
                                            <pop-over content="
                                            <h4>Charge Interest</h4>
                                            <p>Charge the Client interest if his Account is overdue?</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">

                                        <b-form-checkbox
                                            :id="id + '-investment-fee'"
                                            v-model="record.investmentfeeflag"
                                            name="InvestmentFee"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Charge Investment Fee</span>
                                            <pop-over content="
                                            <h4>Charge Investment Fee</h4>
                                            <p>Investment Handling Fee - This is charged when interest is added to an investment</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-agreed-fee'"
                                            v-model="record.agreedfeeflag"
                                            name="AgreedFee"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Charge an Agreed Fee?</span>
                                            <pop-over content="
                                            <h4>Charge an Agreed Fee?</h4>
                                            <p>The Client has negotiated a set percentage of any receipts as their fee for this Matter</p>
                                        "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>

                                <div v-show="record.agreedfeeflag == '1'" class="form-group row">
                                    <div class="mt-1 col-md-3" title="The Agreed Fee is limited to the Debtor's outstanding costs">
                                        <b-form-checkbox
                                            :id="id + '-agreed-fee-limit'"
                                            v-model="record.agreedfeelimit"
                                            name="AgreedFeeLimit"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Limit?</span>
                                        </b-form-checkbox>

                                    </div>

                                    <text-input  inputGroup="%" _class="col-md-5" type="number" input-class="form-input-number" v-model="record.agreedfeepercent" name="agreedfeepercent" title="Percentage of the Receipt (incl VAT) to generate as a fee(as agreed with the Client)" :error="errors.agreedfeepercent"/>
                                    

                                </div>    

                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Vat Rate</label>
                                        <pop-over content="
                                            <h4>Vat Rate</h4>
                                            <p>You can set the Matter to 'Zero Rated' for overseas clients, etc</p>
                                            "/>
                                        <v-select
                                            :options="vatRate" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="vatRate => vatRate.value"
                                            v-model="record.vatexemptflag"
                                            title="You can set the Matter to 'Zero Rated' for overseas clients, etc"
                                        />
                                        
                                        <div v-if="errors.vatexemptflag" v-html="errors.vatexemptflag[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>
                            

                            </fieldset>

                        </div>

                    </div>
                </div>

                <div v-show="activeTab === 'Invoicing'" class="form-tab-content">

                    <div class="row">

                        <div class="col-md-12">
                            <fieldset class=""><legend>Invoice</legend>

                                <div class="form-group row">
                                    <radio-buttons 
                                    :popOver="`<h4>Create</h4>
                                        <p>Invoice (1) - Regular accounting invoice using posted transactions
                                        <br>Proforma Account (2) - A proforma invoice including unposted Fee Notes
                                        <br>None (0) - Do not create invoices for this Matter</p>`"
                                    _class="col-md-12" 
                                    :record="record" 
                                    column="invoiceflag" 
                                    :buttons="[
                                        {value:'1', text: 'Invoice'},
                                        {value:'2', text: 'Proforma Account'},
                                        {value:'0', text: 'None'},
                                    ]" 
                                    name="invoiceflag" 
                                    label="Create" 
                                    :error="errors.invoiceflag"
                                    @change="invoiceFlagChanged"
                                    />
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-4">
                                        <label>Balance</label>                                        
                                        <pop-over content="
                                            <h4>Balance</h4>
                                            <p>Invoice shows BFwd Balance or all transactions on statement</p>
                                            "/>
                                        <v-select
                                            :options="invoiceBFwd" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="invoiceBFwd => invoiceBFwd.value"
                                            v-model="record.invoicebfwdoption"
                                            
                                        />
                                        
                                        <div v-if="errors.invoicebfwdoption" v-html="errors.invoicebfwdoption[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                            </fieldset>

                            <fieldset class="mt-3"><legend>Fees</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Layout</label>                                        
                                        <pop-over content="
                                            <h4>Fee Layout</h4>
                                            <p>Itemised - Show the amount next to each fee. Essay Style - Show all fees with one total. Totals Only - Show a total for all fees</p>
                                            "/>
                                        <v-select
                                            :options="invoiceFee" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="invoiceFee => invoiceFee.value"
                                            v-model="feeSettings.feeOption"
                                            
                                        />
                                        
                                        <!-- <div v-if="errors.invoicefeeoption" v-html="errors.invoicefeeoption[0]" class="invalid-feedback"></div> -->

                                    </div>

                                    <div v-show="feeSettings.feeOption == '0' || feeSettings.feeOption == '1'" class="mt-4 col-md-4">

                                        <b-form-checkbox
                                            :id="id + '-fee-summarize'"
                                            v-model="feeSettings.feeSummarizeFlag"
                                            name="FeeSummarizeFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Summarise</span>
                                            <pop-over content="
                                            <h4>Summarise</h4>
                                            <p>Summarise fees with the same description
                                            or fees posted to the same ledger account</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div> 

                                </div>

                                <div v-show="feeSettings.feeOption == '1'" class="form-group row">

                                    <div class="col-md-6">
                                        <label>Fee Separator</label>
                                            <pop-over content="
                                            <h4>Fee Separator</h4>
                                            <p>Separate fees with semi-colon or print each fee on a separate line</p>
                                            "/>
                                        <v-select
                                            :options="separatorOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="separatorOptions => separatorOptions.value"
                                            v-model="feeSettings.feeSeparatorOption"
                                        />
                                        
                                        <!-- <div v-if="errors.feeOption.feeSeparatorOption" v-html="errors.feeOption.feeSeparatorOption[0]" class="invalid-feedback"></div> -->

                                    </div>

                                </div>

                            </fieldset>

                            <fieldset class="mt-3"><legend>Disbursements</legend>    

                                <div class="form-group row">
                                
                                    <div class="col-md-8">
                                        <label>Layout</label>
                                            <pop-over content="
                                            <h4>Disbursement Layout</h4>
                                            <p>Itemised - Show the amount next to each Disbursement</p>
                                            <p>Essay Style - Show all Disbursements with one total</p>
                                            <p>Totals Only - Show a total of all the Disbursements</p>
                                            <p>Creditors Itemised - Total Business Disbursements but Itemise Creditors Disbursements</p>
                                            "/>
                                        <v-select
                                            :options="disbursementFee" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="disbursementFee => disbursementFee.value"
                                            v-model="disbursementSettings.disbursementOption"
                                        />
                                        
                                        <!-- <div v-if="errors.invoicedisbursementoption" v-html="errors.invoicedisbursementoption[0]" class="invalid-feedback"></div> -->

                                    </div>

                                    <div v-show="disbursementSettings.disbursementOption == '0' || disbursementSettings.disbursementOption == '1'" class="mt-4 col-md-4">

                                        <b-form-checkbox
                                            :id="id + '-disbursement-summarize'"
                                            v-model="disbursementSettings.disbursementSummarizeFlag"
                                            name="disbursementSummarizeFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Summarise</span>
                                            <pop-over content="
                                            <h4>Summarise</h4>
                                            <p>Summarise disbursements with the same description
                                            or disbursements posted to the same ledger account</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div> 

                                    <div v-show="disbursementSettings.disbursementOption == '2' " class="mt-4 col-md-4">

                                        <b-form-checkbox
                                            :id="id + '-separate-creditor-disbursement-option'"
                                            v-model="disbursementSettings.separateCreditorDisbursementOption"
                                            name="separateCreditorDisbursementOption"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Separate Creditor Disbursements</span>
                                            <pop-over content="
                                            <h4>Separate Creditor Disbursements</h4>
                                            <p>Separate the Creditor and Business disbursements</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div> 

                                </div>

                                <div v-show="disbursementSettings.disbursementOption == '1'" class="form-group row">

                                    <div class="col-md-6">
                                        <label>Disbursement Separator</label>
                                            <pop-over content="
                                            <h4>Disbursement Separator</h4>
                                            <p>Separate disbursement with semi-colon or print each disbursement on a separate line</p>
                                            "/>

                                        <v-select
                                            :options="separatorOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="separatorOptions => separatorOptions.value"
                                            v-model="disbursementSettings.disbursementSeparatorOption"
                                    
                                        />
                                        
                                        <!-- <div v-if="errors.feeOption.feeSeparatorOption" v-html="errors.feeOption.feeSeparatorOption[0]" class="invalid-feedback"></div> -->

                                    </div>

                                    <div class="mt-4 col-md-6">

                                        <b-form-checkbox
                                            :id="id + '-itemise-creditor-disbursement-option'"
                                            v-model="disbursementSettings.itemiseCreditorDisbursementOption"
                                            name="itemiseCreditorDisbursementOption"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Itemise Creditor Transactions</span>
                                            <pop-over content="
                                            <h4>Itemise Creditor Transactions</h4>
                                            <p>Leave disbursements to creditors as itemised transactions.</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div> 
                                </div>

                            </fieldset>

                        </div>


                    </div>

                    <div class="mt-3 row">

                        <div class="col-md-6">

                            <fieldset class=""><legend>Consolidation</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-10">
                                        <label>Method</label>

                                        <pop-over content="
                                        <h4>Consolidation Method</h4>

                                        <p><strong>Consolidate Balance Only</strong></p>
                                        <p>Balance are transfered to the consolidated account.
                                        The client for this Account is invoiced.</p>

                                        <p><strong>Full Consolidation</strong></p>
                                        Transfers the balance of the individual Matter and creates one consolidated Invoice.</p>

                                        <p><strong>Consolidation Account</strong></p>
                                        <p>Other Matters are consolidated to this Account.</p>
                                        "/>

                                        <v-select
                                            :options="consolidatedOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="consolidatedOptions => consolidatedOptions.value"
                                            v-model="record.consolidatedflag"/>
                                        
                                        <div v-if="errors.consolidatedflag" v-html="errors.consolidatedflag[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div v-show="record.consolidatedflag == '1' || record.consolidatedflag == '2'" class="form-group row">
                                    
                                        <select-consolidate-matter  
                                            _class="col-md-10"
                                            popOver="<h4>Consolidate To</h4>
                                            <p>Consolidate transactions to this Matter</p>
                                            <p>This is an auto-complete field, i.e. type the first few character to locate the entry</p>"
                                            callback="consolidateMatterSelected"
                                            parentName="selectConsolidateMatter"
                                            label="Consolidate To"
                                            :id="id + '-select-consoidate-matter'" 
                                            :ref="id + '-select-consoidate-matter'" 
                                            :error="errors.recordId" 
                                            :formRef="id + '-select-consoidate-matter'"/>
                                    </div>

                                

                                <div v-show="record.consolidatedflag == '4'" class="form-group row">
                                
                                    <div class="col-md-10">

                                        <b-form-checkbox
                                            :id="id + '-consolidation-option'"
                                            v-model="record.consolidationoption"
                                            name="consolidationOption"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Print transactions for each matters on a separate page</span>
                                            <pop-over content="
                                            <h4>Print transactions for each matters on a separate page</h4>
                                            <p>The transactions for each matter will be printed on a separate page.</p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                            </fieldset>

                            <fieldset class="mt-3"><legend>Third Party</legend>
                                
                                <div class="form-group row">
                                
                                    <div class="col-md-10">

                                        <b-form-checkbox
                                            :id="id + '-consolidation-option'"
                                            v-model="invoicePartyFlag"
                                            name="consolidationOption"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Invoice Alternate Party</span>
                                            <pop-over content="
                                            <h4>Invoice Alternate Party</h4>
                                            <p>By default an invoice is sent to the client.
                                            You can override this by selecting an
                                            alternate Party from this Matter</p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                                <div  class="form-group row">

                                        <select-invoice-party
                                            _class="col-md-12"
                                            :id="id + '-select-invoice-party'"
                                            label="Party"
                                            popOver="<h4>Party</h4>
                                            <p>Select a Party to send the Invoice to.</p>"
                                            callback="invoicePartySelected"
                                            parentName="selectInvoiceParty"
                                            :ref="uniqueId + '-select-invoice-party'"
                                            :formRef="uniqueId + '-select-invoice-party'"
                                            singular="Client"
                                            plural="Clients"
                                        />
                                    </div>

                                

                            </fieldset>

                        </div>

                        <div class="col-md-6">  

                            <fieldset class=""><legend>Invoice Options</legend>
                            
                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-consolidate-disbursement'"
                                            v-model="record.consolidatedisbursementflag"
                                            name="consolidateDisbursement"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Do Not Combine Fees</span>
                                            <pop-over content="
                                            <h4>Do Not Combine Fees</h4>
                                            <p>Do not combine fees (that are marked in the fee sheet) together for this matter?</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>


                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-exclude-units-on-account'"
                                            v-model="record.excludeunitsonaccount"
                                            name="excludeUnitsOnAccount"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Exclude Units</span>
                                            <pop-over content="
                                            <h4>Exclude Units</h4>
                                            <p>Remove unit portion from description on invoice transactions.
                                            i.e the bracket portion will be removed
                                            e.g  Telephone call (20 min) will become Telephone call</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-override-invoice'"
                                            v-model="record.overrideinvoice"
                                            name="overrideInvoice"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Override Invoice Layout</span>
                                            <pop-over content="
                                            <h4>Override Invoice Layout</h4>
                                            <p></p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                                <div class="form-group row">
                                    
                                    <radio-buttons 
                                    :popOver="`<h4>Type of case</h4>
                                        <p>Action or Application</p>`"
                                    _class="col-md-12" 
                                    :record="colData" 
                                    column="formatOption" 
                                    :boxedFlag="true"
                                    :buttons="[
                                        {value:'0', text: 'Print Invoice & Statements'},
                                        {value:'1', text: 'Print Invoices as Statements'},
                                    ]" 
                                    name="formatOption" 
                                    label="Print Options" 
                                    :error="errors.formatOption"
                                    />
                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-separate-invoice'"
                                            v-model="record.separateinvoice"
                                            name="separateInvoice"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Separate Invoice and Statements</span>
                                            <pop-over content="
                                            <h4>Separate Invoice and Statements</h4>
                                            <p></p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-separate-pages'"
                                            v-model="record.separatepages"
                                            name="separatePages"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Print on Separate Pages</span>
                                            <pop-over content="
                                            <h4>Print on Separate Pages</h4>
                                            <p></p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                                <div class="form-group row">
                                
                                    <div class="col-md-12">

                                        <b-form-checkbox
                                            :id="id + '-show-vat'"
                                            v-model="record.showvat"
                                            name="showVat"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Show the VAT</span>
                                            <pop-over content="
                                            <h4>Show the VAT</h4>
                                            <p></p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>

                                </div>

                                </fieldset>

                        </div>
                    </div>

                </div>

                <div v-show="activeTab === 'Litigation'" class="form-tab-content">
                    <div class="row">

                        <div class="col-xxl-6">

                            <fieldset><legend>Litigation</legend>
                            
                                <div class="form-group row">
                                    <radio-buttons 
                                    :popOver="`<h4>Type of case</h4>
                                        <p>Action or Application</p>`"
                                    _class="col-md-12" 
                                    :record="colData" 
                                    column="casetype" 
                                    :buttons="[
                                        {value:'Act', text: 'Action'},
                                        {value:'App', text: 'Application'},
                                    ]" 
                                    name="casetype" 
                                    label="Type of case" 
                                    :error="errors.casetype"
                                    />
                                </div>
                            
                                <div class="form-group row">
                                    <radio-buttons 
                                    :popOver="`<h4>We act for</h4>
                                        <p>Who we are acting for?</p>`"
                                    _class="col-md-12" 
                                    :record="colData" 
                                    column="actingfor" 
                                    :buttons="[
                                        {value:'P', text: 'Plaintiff'},
                                        {value:'D', text: 'Defendant'},
                                    ]" 
                                    name="actingfor" 
                                    label="We act for" 
                                    :error="errors.actingfor"
                                    />
                                </div>
                            
                                <div class="form-group row">
                                    <radio-buttons 
                                    :popOver="`<h4>Court</h4>
                                        <p>Which court is the Matter being heard in?</p>`"
                                    _class="col-md-12" 
                                    :record="colData" 
                                    column="courtflag" 
                                    :buttons="[
                                        {value:'M', text: 'District'},
                                        {value:'R', text: 'Regional'},
                                        {value:'H', text: 'High'},
                                    ]" 
                                    name="courtflag" 
                                    label="Court" 
                                    :error="errors.courtflag"
                                    />
                                </div>
                            
                                <div class="form-group row">
                                    <radio-buttons 
                                    :popOver="`<h4>Status</h4>
                                        <p>Is the Matter defended or undefended</p>`"
                                    _class="col-md-12" 
                                    :record="colData" 
                                    column="defended" 
                                    :buttons="[
                                        {value:'U', text: 'Undefended'},
                                        {value:'D', text: 'Defended'},
                                    ]" 
                                    name="defended" 
                                    label="Status" 
                                    :error="errors.defended"
                                    />
                                </div>

                                <div class="form-group row">
                                    <select-debtor-fee-sheet
                                        :id="id + '-select-debtor-feesheet'"
                                        callback="debtorFeeSheetSelected"
                                        parentName="selectDebtorFeeSheet"
                                        _class="col-md-12"
                                        popOver="<h4>Fee Sheet</h4><p>The Debtors Fee Sheet.</p>"
                                        title="The Debtors Fee Sheet"
                                        :ref="uniqueId + '-matter-debtor-select-feesheet'" 
                                        :form-ref="uniqueId + '-matter-debtor-select-feesheet'"
                                        :error="errors.debtorfeesheetid"
                                    />

                                </div>
                                <div class="form-group row">
                                    <text-input
                                    _class="col-md-6" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.claimamount" 
                                    name="claimamount" 
                                    label="Claim Amount"
                                    popOver="<h4>Claim Amount</h4>
                                        <p>The Claim Amount for this Matter</p>"
                                    :error="errors.claimamount"/>

                                    <text-input  
                                    _class="col-md-6" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.casenumber" 
                                    name="casenumber" 
                                    label="Case Number"
                                    popOver="<h4>Case Number</h4>
                                        <p>The Case Number of this Matter</p>"
                                    :error="errors.casenumber"/>
                                </div>

                                <div class="form-group row">
                                        
                                    <text-input
                                    inputGroup="%"   
                                    _class="col-md-6" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.interestrate" 
                                    name="interestrate" 
                                    label="Interest"
                                    popOver="<h4>Interest</h4>
                                        <p>The interest charged on the claim by the Plaintiff</p>"
                                    :error="errors.interestrate"/>

                                    <div class="col-md-6">

                                        <label>From</label>

                                        <pop-over content="
                                        <h4>Interest From</h4>
                                        <p>The date from which interest can be calculated</p>
                                        "/>

                                        <date-picker 
                                        :readOnly="record.readOnly ? true: false" 
                                        ref="interestFromDatePickerComponent" 
                                        v-model="record.formattedinterestfrom" 
                                        :config="$root.datePickerOptions"/>

                                        <div v-show="errors.interestfrom" v-html="errors.importantdate" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div class="form-group row">

                                    <div class="col-md-6">

                                        <label>Court Date</label>

                                        <pop-over content="
                                        <h4>Court Date</h4>
                                        <p>The date the Matter has been Set Down</p>
                                        "/>
                            
                                        <date-picker 
                                        v-model="record.formattedcourtdate" 
                                        :readOnly="record.readOnly ? true: false" 
                                        ref="courtDatePickerComponent" 
                                        :config="$root.datePickerOptions"/>

                                        <div v-show="errors.courtdate" v-html="errors.courtdate" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div class="form-group row">
                                        
                                    <div class="col-md-12">
                            
                                        <b-form-checkbox
                                            :id="id + '-nca-flag'"
                                            v-model="colData.ncaflag"
                                            name=":NCAFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <pop-over content="
                                                <h4>The National Credit Act applies to this Matter?</h4>
                                                <p>Does this Matter fall under the National Credit Act?</p>
                                            "/>
                                            <span>The National Credit Act applies to this Matter?</span>
                                        </b-form-checkbox>

                                    </div>

                                </div> 
                            
                                <div class="form-group row">
                                        
                                    <div class="col-md-12">
                            
                                        <b-form-checkbox
                                            :id="id + '-attorney-client-flag'"
                                            v-model="colData.attorneyclientflag"
                                            name="attorneyClientFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <pop-over content="
                                                <h4>Debtor is being charged on the Attorney/Client scale?</h4>
                                                <p>Include costs on the processes that are marked 'Attorney/Client'.</p>
                                            "/>
                                            <span>Debtor is being charged on the Attorney/Client scale?</span>
                                        </b-form-checkbox>

                                    </div>

                                </div> 

                                <div class="form-group row">
                                                                    
                                    <text-input
                                    _class="col-md-12" 
                                    v-model="colData.popupreminder"
                                    type="text" 
                                    input-class="form-input-text" 
                                    name="popupreminder" 
                                    label="Popup Reminder"
                                    popOver="<h4>Popup Reminder</h4>
                                        <p>Show this message whenever the User accesses the Debtors Account</p>"
                                    :error="errors.popupreminder"/>

                                </div>

                            </fieldset>

                        </div>

                        <div class="col-xxl-6 mt-xl-3 mt-xxl-0">

                            <fieldset><legend>PTP Details</legend>

                                <div class="form-group row">

                                    <text-input
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.debtorpaymentamount" 
                                    name="debtorpaymentamount" 
                                    label="Amount"
                                    popOver="<h4>Amount</h4>
                                        <p>The debtor has made a committment to pay this amount weekly or monthly</p>
                                        <p>If a different amount is receipted, a warning will pop up</p>"
                                    :error="errors.debtorpaymentamount"/>

                                </div>

                                <div class="form-group row">                            
                                
                                    <div class="col-md-8">
                                        <label>Frequency</label>

                                        <pop-over content="
                                        <h4>Frequency</h4>
                                        <p>Pending means the Matter will be Archived after month end, but  only if it has no more transactions.</p>
                                        <p>Archived means it is available but hidden from view. It can be unachived to become Live again.</p>
                                        "/>

                                        <v-select
                                            :options="debtorPaymentFrequency" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="debtorPaymentFrequency => debtorPaymentFrequency.value"
                                            v-model="record.debtorpaymentfrequency"/>
                                        
                                        <div v-if="errors.debtorpaymentfrequency" v-html="errors.debtorpaymentfrequency[0]" class="invalid-feedback"></div>

                                    </div>

                                    <text-input
                                    _class="col-md-4" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.debtorpaymentday" 
                                    name="debtorpaymentday" 
                                    label="Day"
                                    popOver="<h4>Day</h4>
                                        <p>The day of the month the payment will be made on (insert 31 if last day of every month)</p>"
                                    :error="errors.debtorpaymentday"/>

                                </div>

                                <div class="form-group row">

                                    <div class="col-md-8">

                                        <label>Starting From</label>

                                        <pop-over content="
                                        <h4>Starting From</h4>
                                        <p>The date when the payments began or the effective date</p>
                                        "/>
                            
                                        <date-picker 
                                        :readOnly="record.readOnly ? true: false" 
                                        v-model="colData.formattedptpstartdate" 
                                        ref="courtDatePickerComponent" 
                                        :config="$root.datePickerOptions"/>

                                        <div v-show="errors.ptpstartdate" v-html="errors.ptpstartdate" class="invalid-feedback"></div>

                                    </div>
                                </div>

                                <div class="form-group row">                            
                                
                                    <div class="col-md-12">
                                        <label>Method of Payment</label>

                                        <pop-over content="
                                        <h4>Method of Payment</h4>
                                        <p>How the PTP is being paid.</p>
                                        "/>
                            
                                        <v-select
                                            :options="ptpPaymentMethod" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="ptpPaymentMethod => ptpPaymentMethod.value"
                                            v-model="record.ptppaymentmethod"/>
                                        
                                        <div v-if="errors.ptppaymentmethod" v-html="errors.ptppaymentmethod[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                            </fieldset>
                            
                            <fieldset class="mt-3"><legend>Debtor Payment Options (Debtors Account)</legend>

                                <div class="form-group row">
                                        
                                    <text-input
                                    inputGroup="%"   
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.receiptpercenttocosts" 
                                    name="receiptpercenttocosts" 
                                    label="Receipt Percent To Costs"
                                    popOver="<h4>Receipt Percent To Costs</h4>
                                        <p>What percentage of the Debtors receipt goes to cover Costs first.</p>
                                        <p>The remaining percent goes to the Client or reduces the Capital</p>"
                                    :error="errors.receiptpercenttocosts"/>
                                </div>
                                
                                <div class="form-group row">

                                    <text-input
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    name="payattorneyfirstamount" 
                                    v-model="record.payattorneyfirstamount" 
                                    label="Pay Off these Costs First"
                                    popOver="<h4>Pay Off these Costs First</h4>
                                        <p>Any receipts by the debtor will first go to paying off this amount (optional)</p>"
                                    :error="errors.payattorneyfirstamount"/>

                                </div>

                            </fieldset>


                        </div>

                    </div>
                </div>

                <div v-show="activeTab === 'Miscellaneous'" class="form-tab-content">
                    <div class="row">

                        <div class="col-md-6">

                            <fieldset class=""><legend>Sundry Settings</legend>

                                <div class="form-group row">

                                    <select-billing-rate
                                        :id="id + '-select-billing-rate'"
                                        _class="col-md-12"
                                        label="Default Billing Rate"
                                        popOver="<h4>Default Billing Rate</h4>
                                        <p>The Time Billing Rate nomally used on this Matter.</p>"
                                        title="Select a Billing Rate"
                                        :ref="uniqueId + '-select-billing-rate'" 
                                        :form-ref="uniqueId + '-select-billing-rate'"
                                        :clearIcon="true"
                                        :error="errors.stagegroupid"
                                    />

                                </div>

                                <div class="form-group row">

                                    <text-input 
                                    _class="col-md-4" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.feeestimate" 
                                    name="feeestimate" 
                                    label="Fee Estimate"
                                    popOver="<h4>Fee Estimate</h4>
                                            <p>The Fee Sheet used to bill the Client</p>"
                                    :error="errors.feeestimate"/>

                                    <div class="col-md-12">

                                        <label v-text="'Warning'" style="margin-bottom: 0.6rem !important;"/>

                                        <pop-over content="
                                        <h4>Fee Estimate Warning</h4>
                                        <p>If the Fees for this Matter exceed the Fee Estimate, you will receive a warning.</p>
                                        <p>This can be useful if a Client has received a quotation and the fees now exceed that amount.</p>
                                        "/>


                                        <b-form-checkbox
                                            :id="id + '-fee-estimate-warning'"
                                            v-model="record.feeestimatewarningflag"
                                            name="feeEstimateWarningFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            Notify if Fees exceed the Fee Estimate
                                        </b-form-checkbox>

                                    </div>


                                </div>

                                <div class="form-group row">

                                    <div class="col-md-12">

                                        <label>Access</label>
                                        <pop-over content="
                                                    <h4>Access</h4>
                                                    <p>Can other Employees access this Matter?</p>
                                                    "/>
                                        <v-select
                                            :options="matterAccessOptions" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="matterAccessOptions => matterAccessOptions.value"
                                            v-model="record.access"
                                        />

                                        <div v-if="errors.access" v-html="errors.access[0]" class="invalid-feedback"></div>
                                    
                                    </div>
                                </div>

                                <div class="form-group row">
                                    
                                    <text-input 
                                    _class="col-md-12"  
                                    v-model="record.filecabinet" 
                                    name="filecabinet" 
                                    label="Filing Cabinet"
                                    popOver="<h4>Filing Cabinet</h4>
                                            <p>A further reference to help locate this Matter</p>"
                                    :error="errors.filecabinet"/>

                                </div>

                                <div class="form-group row">

                                    <div class="col-md-8">

                                        <label>Important Date</label>

                                        <pop-over content="
                                        <h4>Important Date</h4>
                                        <p>A date linked to a Matter that can be used for any purpose by the user (e.g. in a document or as a filter for some reports).</p>
                                        "/>
                                        <date-picker :readOnly="record.readOnly ? true: false" ref="datePickerComponent" v-model="record.formattedimportantdate" :config="$root.datePickerOptions"/>
                                        <div v-show="errors.importantdate" v-html="errors.importantdate" class="invalid-feedback"></div>

                                    </div>

                                </div>  
                                
                                <div class="form-group row">
                                
                                    <text-input  
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.claimamount" 
                                    name="claimamount" 
                                    label="Claim Amount"
                                    popOver="<h4>Claim Amount</h4>
                                        <p>The Claim Amount for this Matter</p>"
                                    :error="errors.claimamount"/>

                                </div> 

                                <div class="form-group row">

                                    <text-input 
                                    inputGroup="%"
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.discountsurcharge" 
                                    name="discountsurcharge" 
                                    label="Discount/Surcharge"
                                    popOver="<h4>Discount/Surcharge</h4>
                                        <p>The discount or surcharge applied to the fee sheet for this matter</p>"
                                    :error="errors.discountsurcharge"/>
                                
                                
                                </div> 

                                <div class="form-group row">

                                    <div class="col-md-6">

                                        <label>Prescribes On</label>

                                        <pop-over content="
                                        <h4>Prescribes On</h4>
                                        <p>The date this matter can no longer be heard in court or whose legal status</p>
                                        <p>will become invalid or unenforcable by the process of prescription.</p>
                                        "/>
                                        <date-picker :readOnly="record.readOnly ? true: false" ref="datePickerComponent" v-model="record.formattedprescriptiondate" :config="$root.datePickerOptions"/>
                                        <div v-show="errors.prescriptiondate" v-html="errors.prescriptiondate" class="invalid-feedback"></div>

                                    </div>

                                        <div class="mt-4 col-md-6">

                                        <b-form-checkbox
                                            :id="id + '-prescription-warning'"
                                            v-model="record.showprescriptionwarningflag"
                                            name="showprescriptionwarningflag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>Warning?</span>
                                            <pop-over content="
                                            <h4>Prescribed warning</h4>
                                            <p>Display a message warning the user that the Matter is due to / has prescribed?</p>
                                            "/>
                                        </b-form-checkbox>

                                    </div>

                                </div>   
                                <div class="form-group row">
                                    
                                    <div class="col-md-8">
                                        <label>Fica</label>
                                        <b-form-checkbox
                                            :id="id + '-fica-flag'"
                                            v-model="record.noficaflag"
                                            name="noFicaFlag"
                                            value="1"
                                            unchecked-value="0"
                                            switch 
                                            size="lg"
                                            >
                                            <span>This Matter is exempt from Fica</span>
                                            <pop-over content="
                                            <h4>Fica</h4>
                                            <p>This Matter will not be checked for FICA compliance</p>
                                            "/>
                                        </b-form-checkbox>
                                    </div>
                                </div>   

                            </fieldset>


                        </div>

                        <div class="col-md-6">

                            <fieldset class=""><legend>Status</legend>

                                <div class="form-group row">                            
                                
                                    <div class="col-md-10">
                                        <label>Current Status</label>

                                        <pop-over content="
                                        <h4>Current Status</h4>
                                        <p>Pending means the Matter will be Archived after month end, but  only if it has no more transactions.</p>
                                        <p>Archived means it is available but hidden from view. It can be unachived to become Live again.</p>
                                        "/>

                                        <v-select
                                            :options="archiveStatus" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="archiveStatus => archiveStatus.value"
                                            v-model="record.archivestatus"/>
                                        
                                        <div v-if="errors.archivestatus" v-html="errors.archivestatus[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div class="form-group row">

                                    <div class="col-md-8">

                                        <label>Archive Date</label>

                                        <pop-over content="
                                        <h4>Archive Date</h4>
                                        <p>The date this Matter was archived.</p>
                                        "/>
                                        <date-picker :readOnly="record.readOnly ? true: false" ref="datePickerComponent" v-model="record.formattedarchivedate" :config="$root.datePickerOptions"/>
                                        <div v-show="errors.archivedate" v-html="errors.archivedate" class="invalid-feedback"></div>

                                    </div>

                                </div>
                                
                                <div class="form-group row">

                                    <text-input 
                                    _class="col-md-8" 
                                    type="number" 
                                    input-class="form-input-number" 
                                    v-model="record.archiveno" 
                                    name="archiveno" 
                                    label="Archive Number"
                                    popOver="<h4>Archive Number</h4>
                                        <p>A unique number used to identify this matter once it has been archived</p>"
                                    :error="errors.archiveno"/>

                                
                                </div>    
                            </fieldset>

                            <fieldset class="mt-3"><legend>Groups Belonged To</legend>

                                <mat-group-table
                                    :id="uniqueId + '-mat-group-form-table'"
                                    :ref="uniqueId + '-mat-group-table'"
                                    :table-id="uniqueId + '-mat-group-table'"
                                    :lazyLoadFlag="true"
                                    :formTable="true"
                                    :searchInputFocus="false"
                                />

                            </fieldset>

                        </div>

                    </div>      

                    <div class="row">

                        <div class="col-md-12">

                            <fieldset class=""><legend>General</legend>

                                <div class="form-group row">
                                    <text-area 
                                    _class="col-md-12"
                                    popOver="<h4>General Remarks</h4>
                                    <p>General remarks regarding this Matter</p> 
                                    <p>These can appear on reports to Client (500 characters long)</p>"
                                    rows="6" 
                                    cols="50" 
                                    v-model="record.remarks" 
                                    name="remarks" 
                                    label="Remarks"
                                    :error="errors.remarks"
                                    :lookupLibraryFlag="true"
                                    lookupLibraryCategory="General remarks regarding this Matter "
                                    />
                                </div>

                            </fieldset>
                            
                            <fieldset class="mt-3"><legend>Accounting</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-6">
                                        <label>Display</label>
                                        <pop-over content="
                                        <h4>Display Accounting Message</h4>
                                        <p>A message for the accounts department</p>
                                        <p>Can be used to alert the bookeeper when working on this Matter</p>
                                        <p>(250 characters long).</p>
                                        "/>
                                        <v-select
                                            :options="accountingMessageDisplay" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="accountingMessageDisplay => accountingMessageDisplay.value"
                                            v-model="record.commentoption"
                                            title=""
                                        />
                                        
                                        <div v-if="errors.messageDisplay" v-html="errors.messageDisplay[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div class="form-group row">
                                    <text-area 
                                    _class="col-md-12"
                                    popOver="<h4>Accounting Message</h4>
                                    <p>A message for the accounts department</p>
                                    <p>Can be used to alert the bookeeper when working on this Matter</p>
                                    <p>(250 characters long)</p>"
                                    rows="6" 
                                    cols="50" 
                                    v-model="record.accountcomment" 
                                    name="accountComment" 
                                    label="Message"
                                    title=""
                                    :error="errors.accountcomment"
                                    :lookupLibraryFlag="true"
                                    lookupLibraryCategory="A message for the accounts department"
                                    />
                                </div>

                            </fieldset>
                            
                            <fieldset class="mt-3"><legend>Internal</legend>

                                <div class="form-group row">
                                
                                    <div class="col-md-6">
                                        <label>Display</label> 
                                        <pop-over content="
                                        <h4>Display Internal Comment</h4>
                                        <p>This message is displayed to the user when they access this Matter</p>
                                        <p>None -The message is not displayed</p>
                                        <p>Popup - The message pops up when the Matter is accessed.</p>
                                        "/>
                                        <v-select
                                            :options="internalMessageDisplay" 
                                            :clearable="false" 
                                            :searchable="false" 
                                            :reduce="internalMessageDisplay => internalMessageDisplay.value"
                                            v-model="record.internalcommentoption"
                                            title=""
                                        />
                                        
                                        <div v-if="errors.internalcommentoption" v-html="errors.internalcommentoption[0]" class="invalid-feedback"></div>

                                    </div>

                                </div>

                                <div class="form-group row">
                                    <text-area
                                    _class="col-md-12"
                                    rows="6" 
                                    cols="50" 
                                    popOver="<h4>Internal Comment</h4>
                                    <p>Comment for internal use</p>
                                    <p>It can be used to alert an Employee to a specific issue with the Matter or Client when they access this Matter</p>"
                                    v-model="record.internalcomment" 
                                    name="internalComment" 
                                    label="Comment"
                                    title=""
                                    :error="errors.internalcomment"
                                    :lookupLibraryFlag="true"
                                    lookupLibraryCategory="Comment for internal use"
                                    />
                                </div>

                            </fieldset>        
                        </div>
                    </div>    

                    <div v-show="editing && record.updatedbyid && record.updatedbydate && record.updatedbytime" class="row mt-3">
                        <div class="col-md-12">
                            <div class="alert alert-danger" v-html="getUpdatedByDetails()"/>
                        </div>
                    </div>


                </div>

                <div v-show="activeTab === 'Extra'" class="form-tab-content">

                    <fieldset 
                        v-bind:key="extraScreen.recordid" v-for="(extraScreen, index) in extraScreens" 
                        :class="index > 0 ? 'mt-3 extra-screen-container' : 'extra-screen-container'"
                    >
                        <legend v-html="extraScreen.screentitle + ' (' + extraScreen.recordid + ')'"></legend>
                        <div :id="'extra-screen-form-container-' + extraScreen.recordid">
                            <form action="#" :id="'extra-screen-form-' + extraScreen.recordid"/>
                        </div>
                    </fieldset>

                </div>

            </div>

            <form-buttons :editing="editing" :viewing="viewing" record="Matter" @ok-clicked="okClicked" @cancel-clicked="closeForm" @delete-clicked="deleteClicked"/>

        </div>

    </div>


</div>

</template>

<script>

import { mapMutations } from 'vuex';
import formTemplate from "@pages/form-template";
import modalTemplate from "@components/modals/modal-template";
import extraScreenTemplate from "@pages/extra-screen-template";

export default {

    mixins: [formTemplate, extraScreenTemplate, modalTemplate],


    //Fetch while idle
    //https://vueschool.io/articles/vuejs-tutorials/lazy-loading-individual-vue-components-and-prefetching/
    //https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c
    
    components: {
        SelectConsolidateMatter: () => import("@pages/matters/SelectMatter"),
        SelectMatterClient: () => import("@pages/parties/SelectParty"),
        SelectMatterType: () => import("@pages/matters/SelectMatterType"),
        SelectDocumentSet: () => import("@pages/document-sets/SelectDocumentSet"),
        SelectBranch: () => import("@pages/matters/SelectBranch"),
        SelectStageGroup: () => import("@pages/matters/SelectStageGroup"),
        SelectBillingRate: () => import("@pages/matters/SelectBillingRate"),
        SelectTrustBank: () => import("@pages/matters/SelectAccount"),
        SelectBusinessBank: () => import("@pages/matters/SelectAccount"),
        SelectIncomeAccount: () => import("@pages/matters/SelectAccount"),
        SelectEmployee: () => import("@pages/employees/SelectEmployee"),
        SelectCostCentre: () => import("@pages/matters/SelectCostCentre"),
        SelectCauseOfAction: () => import("@pages/matters/SelectCauseOfAction"),
        SelectExtraScreen: () => import("@pages/matters/SelectExtraScreen"),
        SelectCostCentre: () => import("@pages/matters/SelectCostCentre"),
        SelectLanguage: () => import("@pages/matters/SelectLanguage"),
        SelectAccountsLanguage: () => import("@pages/matters/SelectLanguage"),
        SelectPlanOfAction: () => import("@pages/matters/SelectPlanOfAction"),
        SelectClientFeeSheet: () => import("@pages/feesheets/SelectFeeSheet"),
        SelectDebtorFeeSheet: () => import("@pages/feesheets/SelectFeeSheet"),
        SelectInvoiceParty: () => import("@pages/parties/SelectMatParty"),
        MatGroupTable: () => import("@pages/matters/MatGroupTable"),
        MatterParties: () => import("@pages/matters/MatterParties"),
    },

    props: {
        resource: {type: String, default: 'Matter' },
        uniqueId: String,
    },

    data() {
        return {
            matPartyTable: null,
            matGroupTable: null,
            colData: {},
            conveyData: {},
            party: {},
            bondData: {},
            docgenData: {},
            matterTypeData: {},
            clientName: '',
            matterEmployeeTable: null,
            matterPartiesTable: null,
            matterCounter: 1,
            matterAccessOptions : [ 
                {value:'O', label: 'Open To All' }, 
                {value:'V', label: 'View Only' }, 
                {value:'R', label: 'Restricted' }, 
            ],
            receiptingOptions : [ 
                {value:'0', label: 'Normal'},
                {value:'1', label: 'Reserve All Receipts'},
                {value:'2', label: 'Reserve Up To An Amount'},
                {value:'3', label: 'Reserve Up To Claim Amount'},
                {value:'4', label: 'Reserve Percentage'},
                {value:'5', label: 'Reserve Percentage Up To'},
            ],
            agentOptions : [ 
                {value:'0', label: 'None'},
                {value:'1', label: 'Use Default'},
                {value:'2', label: 'Custom'},
            ],
            collCommOptions : [ 
                {value:'N', label: 'None'},
                {value:'U', label: 'Use Default'},
                {value:'C', label: 'Custom (Excl)'},
                {value:'I', label: 'Custom (Incl)'},
            ],
            debtorCollCommOptions : [ 
                {value:'N', label: 'None'},
                {value:'U', label: 'Use Default'},
                {value:'C', label: 'Custom (Excl)'},
                {value:'I', label: 'Custom (Incl)'},
                {value:'S', label: 'Schedule'},
            ],
            vatRate : [ 
                {value:'0', label: 'Standard'},
                {value:'2', label: 'Zero Rated'},
                {value:'1', label: 'Vat Exempt'},
            ],
            invoiceBFwd : [ 
                {value:'1', label: 'Brought Forward'},
                {value:'2', label: 'Full'},
                
            ],
            invoiceFee : [ 
                {value:'0', label: 'Itemised'},
                {value:'1', label: 'Essay Style'},
                {value:'2', label: 'Totals Only'},
                
            ],
            archiveStatus : [ 
                {value:'0', label: 'Live'},
                {value:'1', label: 'Pending'},
                {value:'2', label: 'Archived'},
                
            ],
            // 'Monthly|#1|Every 3 Months|#3|Weekly|#2|Bi-Weekly|#4|Every 6 Months|#5'
            debtorPaymentFrequency : [ 
                {value:'1', label: 'Monthly'},
                {value:'3', label: 'Every 3 Months'},
                {value:'2', label: 'Weekly'},
                {value:'4', label: 'Bi-Weekly'},
                {value:'5', label: 'Every 6 Months'},
                
            ],
            // 'Cash|#Cash|Cheque|#Cheque|Credit Card|#Credit Card|Debit Order|#Debit Order|EFT|#EFT|Other|#Other'
            ptpPaymentMethod : [ 
                {value:'Cash', label: 'Cash'},
                {value:'Cheque', label: 'Cheque'},
                {value:'Credit Card', label: 'Credit Card'},
                {value:'Debit Order', label: 'Debit Order'},
                {value:'EFT', label: 'EFT'},
                {value:'Other', label: 'Other'},
                
            ],

            disbursementFee : [ 
                {value:'0', label: 'Itemised'},
                {value:'1', label: 'Essay Style'},
                {value:'2', label: 'Totals Only'},
                {value:'3', label: 'Creditors Itemised'},
                
            ],

            separatorOptions : [ 
                {value:'0', label: 'Separated by a semi-colon'},
                {value:'1', label: 'Each on a new line'},
                
            ],
            accountingMessageDisplay : [ 
                {value:'0', label: 'Default'},
                {value:'1', label: 'Popup'},
                
            ],
            internalMessageDisplay : [ 
                {value:'0', label: 'Default'},
                {value:'1', label: 'Popup'},
                
            ],

            consolidatedOptions : [ 
                // 'No Consolidation|#0|Full Consolidation|#1|Consolidate Balance Only|#2|Consolidation Account|#4'
                {value:'0', label: 'No Consolidation'},
                {value:'1', label: 'Full Consolidation'},
                {value:'2', label: 'Consolidate Balance Only'},
                {value:'4', label: 'Consolidation Account'},
                
            ],
            feeSettings : { 
                feeOption: '0',
                feeSeparatorOption : '0',
                feeSummarizeFlag: '0',

            },
            disbursementSettings : { 
                disbursementOption : '0',
                separateCreditorDisbursementOption : '0',
                disbursementSummarizeFlag: '0',
                itemiseCreditorDisbursementOption: '0',
                disbursementSeparatorOption: '0'

            },

            activeTab: 'General',
            tabs: [
                {
                    pageName: "General",
                    title: "Details",
                    iconClass: '',
                    visible: true,
                    active: true,
                },
                {
                    pageName: "Parties",
                    title: "Parties",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
                {
                    pageName: "Accounting",
                    title: "Accounting",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
                {
                    pageName: "Invoicing",
                    title: "Invoicing",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
                {
                    pageName: "Litigation",
                    title: "Litigation",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
                {
                    pageName: "Miscellaneous",
                    title: "Miscellaneous",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
            ],
            
            invoicePartyFlag:null,
            invoiceFlagSelected:null,
        };
    },

    computed: {

        matterType() {
            return this.record.mattertypeid;
        },

        documentSet() {
            return this.record.docgenid;
        },

    },

    watch: {

        activeTab(newValue) {

            if ( newValue === "Miscellaneous" ) {
                
                setTimeout(() => {

                    if ( this.matGroupTable.table ) {

                        this.matGroupTable.table.columns.adjust;

                    } else {

                        this.matGroupTable.loadDataTable( this.adjustMatGroupTableColumns ); 

                    }

                });

            } else if ( newValue === "Parties" ) {
                
                setTimeout(() => {

                    if ( this.matterPartiesTable.table ) {

                        this.matterPartiesTable.table.columns.adjust;

                    } else {

                        this.matterPartiesTable.loadDataTable( this.adjustMatPartiesTableColumns ); 

                    }

                });

            } else if ( newValue === "Extra" ) {

                this.showExtraScreens();

            }

        }
    },

    methods: {

        ...mapMutations(['setCurrentMatter']),

        editRecord(id) {

            this.setGeneralTab();

            this.clearData();

            this.editing = true;

            this.displayForm(); 

            axios.post('/matters/get',{ id: id })

            .then(response => {

                if ( response.data.errors ) {

                    showError('Error', response.data.errors);

                } else {

                    this.record = response.data.data[0];

                    this.record.updatedbyid = loggedInEmployeeId;

                    if (!this.record.receiptpercent) this.record.receiptpercent = '0.00';
                    if (!this.record.receiptamount) this.record.receiptamount = '0.00';
                    if (!this.record.claimamount) this.record.claimamount = '0.00';
                    if (!this.record.agreedfeepercent) this.record.agreedfeepercent = '0.00';
                    if (!this.record.agentpercent) this.record.agentpercent = '0.00';

                    this.clientName = this.record.partymatterprefix + '-' + this.record.partyname; 

                    this.setFeeAndDisbursementOptions();

                    this.setCurrentMatter({
                        id: this.record.recordid, 
                        fileRef: this.record.fileref,
                        description: this.record.description
                    });

                    this.getRelatedMatterData(this.record.recordid);

                    this.initFormData();

                }

            }).catch( (error) => {
                showError('Error getting Matter', error); 
            });

        },

        initNewRecord(clientId, clientMatterPrefix) {

            this.setGeneralTab();

            this.clearData();

            this.checkTakeOnReminder(clientId);

            this.setTableComponent();   
            
            this.table.unHighlightAllRows();

            this.editing = false;

            let defaultStageGroupId = root.stageGroups.length ? root.stageGroups[0].recordid : null;

            let defaultCostCentreId = root.costCentres.length ? root.costCentres[0].recordid : null;

            let defaultToDoGroupId = root.planOfActions.length ? root.planOfActions[0].recordid : null;

            let defaultMatterTypeId = root.matterTypes.length ? root.matterTypes[0].recordid : null;

            let clientFeeSheets = root.feeSheets.filter(feeSheet => feeSheet.description.toLowerCase().includes('client'));
            let defaultClientFeeSheetId = clientFeeSheets.length ? clientFeeSheets[0].recordid : null;

            let magCourtFeeSheets = root.feeSheets.filter(feeSheet => feeSheet.description.toLowerCase().includes('mag'));
            let defaultDebtorFeeSheetId = magCourtFeeSheets.length ? magCourtFeeSheets[0].recordid : null;

            let defaultDocumentSetId = root.documentSets.length ? root.documentSets[0].recordid : null;

            axios.post('/matters/getNextFileRef',{
                matterPrefix: clientMatterPrefix,
                prefixOption: root.company.matterprefixoption
            })

            .then( async response => {

                if (response.data.error) {
                    showError( 'Error', response.data.error);
                    return;
                }

                this.record = {
                    clientid: clientId,
                    fileRef: response.data.fileRef,
                    description: 'New Matter',
                    instructed: root.global.todaysdate,
                    branchid: this.record.branchid ? this.record.branchid : root.currentEmployee.branchid,
                    clientfeesheetid: this.record.clientfeesheetid ? this.record.clientfeesheetid : defaultClientFeeSheetId,
                    debtorfeesheetid: this.record.debtorfeesheetid ? this.record.debtorfeesheetid : defaultDebtorFeeSheetId,
                    documentlanguageid: this.record.documentlanguageid ? this.record.documentlanguageid : root.company.defaultlanguageid,
                    accountslanguageid: this.record.accountslanguageid ? this.record.accountslanguageid : root.company.defaultlanguageid,
                    stagegroupid: this.record.stagegroupid ? this.record.stagegroupid : defaultStageGroupId,
                    employeeid: this.record.employeeid ? this.record.employeeid : loggedInEmployeeId,
                    costcentreid: this.record.costcentreid ? this.record.costcentreid : defaultCostCentreId,
                    mattertypeid: this.record.mattertypeid ? this.record.mattertypeid : defaultMatterTypeId,
                    docgenid: this.record.docgenid ? this.record.docgenid : defaultDocumentSetId,
                    trustbankid: this.record.trustbankid ? this.record.trustbankid : root.company.trustbankid,
                    businessbankid: this.record.businessbankid ? this.record.businessbankid : root.company.businessbankid,
                    archivestatus: '0',
                    archiveflag: '0',
                    archiveno: '0',
                    access: 'O',
                    feeestimatewarningflag: root.currentEmployee.feeestimatewarningflag,
                    //todogroupid: this.record.todogroupid ? this.record.todogroupid : defaultToDoGroupId,
                    // defaultbillingrateid: this.record.defaultbillingrateid ? this.record.defaultbillingrateid : tbc,
                };

                await this.getMatterClientDefaults()

                .then( ( defaults ) => {

                    this.record.docgenid = defaults.docgenid;
                    this.record.mattertypeid = defaults.mattertypeid;
                    this.record.documentlanguageid = defaults.documentlanguageid;
                    this.record.employeeid = defaults.employeeid;
                    this.record.extrascreenid = defaults.extrascreenid;
                    this.record.bankid = defaults.bankid;
                    this.record.filecabinet = defaults.filecabinet;
                    this.record.discount = defaults.discount;
                    this.record.prescriptiondate = defaults.prescriptiondate;
                    this.record.casenumber = defaults.casenumber;
                    this.record.access = defaults.access;
                    this.record.theirref = defaults.theirref;
                    this.record.contact = defaults.contact;
                    this.record.salutation = defaults.salutation;
                    this.record.oldref = defaults.oldref;
                    this.record.internalcomment = defaults.internalcomment;
                    this.record.accountcomment = defaults.accountcomment;
                    this.record.clientfeesheetid = defaults.clientfeesheetid;
                    this.record.accountslanguageid = defaults.accountslanguageid;
                    this.record.feeestimate = defaults.feeestimate;
                    this.record.feenotesonhold = defaults.feenotesonhold;
                    this.record.interestrate = defaults.interestrate;
                    this.record.scheduleid = defaults.scheduleid;
                    this.record.agentflag = defaults.agentflag;
                    this.record.adminfeeflag = defaults.adminfeeflag;
                    this.record.interestflag = defaults.interestflag;
                    this.record.vatexemptflag = defaults.vatexemptflag;
                    this.record.discountsurcharge = defaults.discountsurcharge;
                    this.record.receiptoption = defaults.receiptoption;
                    this.record.consolidateid = defaults.consolidateid;
                    this.record.consolidatedflag = defaults.consolidatedflag;
                    this.record.invoiceflag = defaults.invoiceflag;
                    this.record.invoiceoption = defaults.invoiceoption;
                    this.record.invoiceformat = defaults.invoiceformat;
                    this.record.costcentreid = defaults.costcentreid;
                    this.record.overrideincomeaccflag = defaults.overrideincomeaccflag;
                    this.record.incomeaccid = defaults.incomeaccid;
                    this.record.trustbankid = defaults.trustbankid;
                    this.record.movementflag = defaults.movementflag;
                    this.record.collcommflag = defaults.collcommflag;
                    this.record.collcommoption = defaults.collcommoption;
                    this.record.collcommpercent = defaults.collcommpercent;
                    this.record.collcommlimit = defaults.collcommlimit;
                    this.record.todogroupid = defaults.todogroupid;
                    this.record.businessbankid = defaults.businessbankid;
                    this.record.branchflag = defaults.branchflag;
                    this.record.branchid = defaults.branchid;
                    this.record.consolidatedisbursementsflag = defaults.consolidatedisbursementsflag;
                    this.record.investmentfeeflag = defaults.investmentfeeflag;
                    this.record.debtorfeesheetid = defaults.debtorfeesheetid;
                    this.record.debtorcollcommoption = defaults.debtorcollcommoption;
                    this.record.debtorcollcommpercent = defaults.debtorcollcommpercent;
                    this.record.debtorcollcommlimit = defaults.debtorcollcommlimit;
                    this.record.matgroup = defaults.matgroup;
                    this.record.receiptpercenttocosts = defaults.receiptpercenttocosts;
                    this.record.agreedfeepercent = defaults.agreedfeepercent;
                    this.record.payattorneyfirstamount = defaults.payattorneyfirstamount;
                    this.record.coldebitfeecodeid = defaults.coldebitfeecodeid;
                    this.record.defaultbillingrateid = defaults.defaultbillingrateid;
                    this.record.stagegroupid = defaults.stagegroupid;
                    this.record.casetype = defaults.casetype;
                    this.record.actingfor = defaults.actingfor;
                    this.record.courtflag = defaults.courtflag;
                    this.record.defended = defaults.defended;
                    this.record.attorneyclientflag = defaults.attorneyclientflag;
                    this.record.courtdate = defaults.courtdate;
                    this.record.invoicebfwdoption = defaults.invoicebfwdoption;
                    this.record.invoicefeeoption = defaults.invoicefeeoption;
                    this.record.invoicedisbursementoption = defaults.invoicedisbursementoption;
                    this.record.receiptamount = defaults.receiptamount;
                    this.record.commentoption = defaults.commentoption;
                    this.record.bondcauseid = defaults.bondcauseid;
                    this.record.matteremployeeid = defaults.matteremployeeid;
                    this.record.internalcommentoption = defaults.internalcommentoption;
                    this.record.agreedfeelimit = defaults.agreedfeelimit;
                    this.record.excludeunitsonaccountflag = defaults.excludeunitsonaccountflag;
                    this.record.receiptpercent = defaults.receiptpercent;
                    this.record.showprescriptionwarningflag = defaults.showprescriptionwarningflag;

                });

                await this.setRelatedMatterData()

                .then( () => {

                    console.log("Before Storing");

                    this.record.queryString = jQuery.param(this.record);

                    axios.post('/matters/store', this.record)
                    
                    .then(response => {

                        if (response.data.errors || response.data.error) {

                            if (response.data.errors) { 
                                showError('Error creating Matter', response.data.errors); 
                                reject();
                            } else { 
                                showError('Error creating Matter', response.data.error[0]); 
                                this.errors = response.data.error; 
                                reject();
                            }


                        } else {

                            this.highlightTableRow(response.data.data[0].recordid, response.data.data[0].fileref);

                            this.editRecord(response.data.data[0].recordid);

                        }

                    }).catch( (error) => {
                        showError('Error saving Matter', error); 
                    });
                });


            }).catch( (error) => {
                showError('Error getting initializing new Matter', error); 
            });

        },

        async initFormData() {

            this.initExtraScreens();

            this.$refs.datePickerComponent.elem.data('DateTimePicker').widgetPositioning(
                { horizontal: 'right', vertical: 'bottom' }
            );            

            if ( !this.editing ) {


            } else {

                //Get the Form Body
                let $thisForm = $('#' + this.id);
                let $formBody = $thisForm.find('.form-tab-body');


                // ***********************************
                // Matter Parties Table
                // ***********************************

                this.matterPartiesTable = this.$refs[this.uniqueId + '-matter-parties'].table;

                this.matterPartiesTable.table = null; // Reset to NULL so the ActiveTab watch reloads the table

                this.matterPartiesTable.subTitle = this.record.fileRef + ' - ' + this.record.description;

                //Order by Role and Sorter (hidden columns in table)
                this.matterPartiesTable.initialOrder = [[9, "asc"],[10, "asc"]];

                this.matterPartiesTable.whereRaw = ["MatParty.MatterId = " + this.record.recordid]; 

                this.matterPartiesTable.tableOptions = {
                    actionColumnWidth: 15,
                    scrollY: (Math.round( $formBody.outerHeight() ) - 220)  + 'px',
                };

                // ***********************************
                // MatGroup Table
                // ***********************************

                this.matGroupTable = this.$refs[this.uniqueId + '-mat-group-table'];

                this.matGroupTable.table = null; // Reset to NULL so the ActiveTab watch reloads the table

                this.matGroupTable.subTitle = this.record.matterprefix + ' - ' + this.record.name;
                this.matGroupTable.noEditButtonFlag = true;

                this.matGroupTable.whereRaw = ["MatGroup.MatterId = " + this.record.recordid]; 

                // Set the table Height 
                this.matGroupTable.tableOptions = {
                    scrollY: (Math.round( $formBody.outerHeight() ) - 220)  + 'px',
                };

                // ***********************************
                // Prime Drop Downs
                // ***********************************

                this.selectConsolidateMatter.matter = {
                    id: this.record.consolidateid,
                    fileref: htmlDecode(this.record.consolidatematterfileref),
                    description: htmlDecode(this.record.consolidatematterdescription),
                };

                this.selectTrustBank.record = {
                    id: this.record.trustbankid,
                    description: htmlDecode(this.record.trustbankdescription),
                };

                this.selectBusinessBank.record = {
                    id: this.record.businessbankid,
                    description: htmlDecode(this.record.businessbankdescription),
                };

                this.selectIncomeAccount.record = {
                    id: this.record.incomeaccid,
                    description: htmlDecode(this.record.incomeaccountdescription),
                };

                this.selectClientFeeSheet.record = {
                    id: this.record.clientfeesheetid,
                    description: htmlDecode(this.record.clientfeesheetdescription),
                };
                

                this.selectDebtorFeeSheet.record = {
                    id: this.record.debtorfeesheetid,
                    description: htmlDecode(this.record.debtorfeesheetdescription),
                };

                if ( this.record.branchflag === '1' ) {

                    this.selectBranch.disabled = false;

                    this.selectBranch.record = {
                        id: this.record.branchid,
                        description: htmlDecode(this.record.branchdescription),
                    };

                } else {

                    this.selectBranch.disabled = true;

                    this.selectBranch.record = {
                        id: null,
                        description: null,
                    };

                }

                this.selectInvoiceParty.party = {
                    id: this.record.invoicepartyid,
                    name: htmlDecode(this.record.invoicepartyname),
                };

                this.selectDocumentSet.record = {
                    id: this.record.docgenid,
                    description: htmlDecode(this.record.docgendescription),
                };

                this.selectMatterType.record = {
                    id: this.record.mattertypeid,
                    description: htmlDecode(this.record.mattypedescription),
                };

                this.selectStageGroup.record = {
                    recordid: this.record.stagegroupid,
                    description: htmlDecode(this.record.stagegroupdescription),
                };

                this.selectEmployee.employee = {
                    id: this.record.employeeid,
                    name: htmlDecode(this.record.employeename),
                };

                this.selectCostCentre.record = {
                    id: this.record.costcentreid,
                    description: htmlDecode(this.record.costcentredescription),
                };

                this.selectLanguage.record = {
                    id: this.record.documentlanguageid,
                    description: htmlDecode(this.record.documentlanguagedescription),
                };

                this.selectAccountsLanguage.record = {
                    id: this.record.accountslanguageid,
                    description: htmlDecode(this.record.accountslanguagedescription),
                };

                this.selectPlanOfAction.record = {
                    id: this.record.todogroupid,
                    description: htmlDecode(this.record.planofactiondescription),
                };

                this.selectBillingRate.record = {
                    recordid: this.record.defaultbillingrateid,
                    description: htmlDecode(this.record.billingratedescription),
                };

                this.selectExtraScreen.record = {};

                if ( this.record?.extrascreenid ) {
                    this.selectExtraScreen.record = {
                        recordid: this.record.extrascreenid,
                        description: htmlDecode(this.record.extrascreendescription),
                    };
                }

            }


        },


        getMatterClientDefaults() {

            return new Promise(async (resolve) => {

                try {

                    let response = await axios.get("/generic/get",  { 
                        params: {
                            tableName: 'matdef',
                            whereRaw: ["matdef.employeeid = " + root.currentEmployee.recordid + " AND ( matdef.clientid = " + this.record.clientid + " OR matdef.clientid = 0)"],
                            orderBy: ['matdef.clientid,desc'],
                        }
                    });

                    if (response.data.errors) {

                        showError( 'Error getting Matter Defaults', response.data.errors);

                    } else {

                        console.log("matdef response.data.data",response.data.data);

                        if ( response.data.data.length) {
                            resolve(response.data.data[0]);
                        } 

                    }

                } catch(error) { 

                    showError('Error getting Matter Defaults', error); 

                };
                
            });

        },


        setRelatedMatterData(id) {

            //**************************************************** */
            //              THIS SHOULD BE DONE IN THE API!!!
            //**************************************************** */

            return new Promise(async (resolve) => {

                try {            

                    let response = await axios.get("/generic/get",  { 
                        params: {
                            tableName: 'docgen',
                            where: ["docgen.recordid,=," + this.record.docgenid]
                        }
                    });

                    if (response.data.errors) {

                        showError( 'Error getting Docgen data', response.data.errors);

                    } else {

                        if ( response.data.data.length ) {
                            this.docgenData = response.data.data[0];
                        } else {
                            this.docgenData = {};
                        }

                        // Add the Client MatParty
                        // MP:Sorter = 1
                        //     MP:MatterID = MAT:RecordID
                        //     MP:RoleID = CTL:ClientRoleID
                        //     MP:PartyID = MAT:ClientID

                        //     MP:ContactID = GetDefaultContact(MP:PartyID)
                        //     MP:LanguageID = GetDefaultPartyLanguage(MP:PartyID)

                        //     MP:Reference = MAT:TheirRef
                        //     MP:MatterDescription = MAT:Description
                        //     Access:MatParty.TryInsert



                        if ( this.isConveyancingMatter() ) {

                            //CREATE CONVEYDATA AND BONDDATA

                        }
                        if ( this.isTransfersMatter() ) {
                            //ADD THE SELLER
                        }

                        if ( this.isBondMatter() ) {
                            //ADD THE MORTGAGOR
                        }
                        if ( this.isCollectionsMatter() ) {

                            console.log("isCollectionsMatter - TO DO: create colData record");

                        //************ ADD THE PLAINTIFF */
                        // MP:MatterID = MAT:RecordID
                        // IF COL:ActingFor = 'D' THEN MP:RoleID = CTL:DefendantRoleID ELSE MP:RoleID = CTL:PlaintiffRoleID.
                        // MP:Sorter = 1
                        // IF Access:MatParty.TryFetch(MP:MatterRoleKey)     ! THERE IS NO PLAINTIFF IN THE LIST OF MATTER PARTIES
                        //     MP:MatterID = MAT:RecordID
                        //     IF COL:ActingFor = 'D' THEN MP:RoleID = CTL:DefendantRoleID ELSE MP:RoleID = CTL:PlaintiffRoleID.
                        //     MP:PartyID = MAT:ClientID
                        //     MP:Reference = MAT:TheirRef
                        //     MP:MatterDescription = MAT:Description
                        //     MP:LanguageID = GetDefaultPartyLanguage(MP:PartyID)


                        }

                        resolve();

                    }
                } catch(error) { 
                    showError('Error setting related Matter data', error); 
                }

            });
        },

        getRelatedMatterData(id) {
            
            axios.get("/generic/get",  { 
                params: {
                    tableName: 'docgen',
                    where: ["docgen.recordid,=," + this.record.docgenid]
                }
            }).then(response => {

                if (response.data.errors) {

                    showError( 'Error getting Docgen data', response.data.errors);

                } else {

                    this.docgenData = response.data.data.length ? response.data.data[0] : {};

                    if ( this.isCollectionsMatter() ) {
                        axios.get("/generic/get",  { 
                            params: {
                                tableName: 'coldata',
                                where: ["coldata.matterid,=," + id]
                            }
                        }).then(response => {

                            if (response.data.errors) {
                                showError( 'Error getting Collections data', response.data.errors);
                            } else {
                                this.colData = response.data.data.length ? response.data.data[0] : {};
                            }
                        }).catch( (error) => {
                            showError('Error getting ColData data', error); 
                        });

                    }

                    if ( this.isConveyancingMatter() ) {
                        axios.get("/generic/get",  { 
                            params: {
                                tableName: 'bonddata',
                                where: ["bonddata.matterid,=," + id]
                            }
                        }).then(response => {

                            if (response.data.errors) {
                                showError( 'Error getting Bond data', response.data.errors);
                            } else {
                                this.bondData = response.data.data.length ? response.data.data[0] : {};
                            }

                        }).catch( (error) => {
                            showError('Error getting BondData data', error); 
                        });

                        axios.get("/generic/get",  { 
                            params: {
                                tableName: 'conveydata',
                                where: ["conveydata.matterid,=," + id]
                            }
                        }).then(response => {

                            if (response.data.errors) {
                                showError( 'Error getting Convey data', response.data.errors);
                            } else {
                                this.conveyData = response.data.data.length ? response.data.data[0] : {};

                                if ( this.conveyData?.bondcauseid ) {

                                    this.selectCauseOfAction.record = {
                                        recordid: this.conveyData.bondcauseid,
                                        description: htmlDecode(this.conveyData.bondcausedescription),
                                    };
                                }

                            }

                        }).catch( (error) => {
                            showError('Error getting ConveyData data', error); 
                        });

                    }

                }

            }).catch( (error) => {
                showError('Error getting Related Matter data in Matter Form', error); 
            });

            axios.get("/generic/get",  { 
                params: {
                    tableName: 'mattype',
                    where: ["mattype.recordid,=," + this.record.mattertypeid]
                }
            }).then(response => {

                if (response.data.errors) {
                    showError( 'Error getting Matter Type data', response.data.errors);
                } else {
                    this.matterTypeData = response.data.data.length ? response.data.data[0] : {};
                }
            }).catch( (error) => {
                showError('Error getting Matter Type data', error); 
            });

            axios.get("/generic/get",  { 
                params: {
                    tableName: 'party',
                    where: ["party.recordid,=," + this.record.clientid]
                }
            }).then(response => {

                if (response.data.errors) {
                    showError( 'Error getting Matter\'s Client data', response.data.errors);
                } else {
                    this.party = response.data.data.length ? response.data.data[0] : {};
                }

            }).catch( (error) => {
                showError('Error getting Client data', error); 
            });
        },

        checkTakeOnReminder(id) {

            // Refactor to just get the mattertakeonreminder column
            console.log("Refactor checkTakeOnReminder to just get the mattertakeonreminder column");

            axios.post('/parties/get',{id: id})

            .then(response => {

                if ( response.data.errors ) {

                    showError('Error checking Matter take on reminder', response.data.errors);

                } else {

                    if ( response.data.data[0].mattertakeonreminder ) {

                        root.$snotify.simple(response.data.data[0].mattertakeonreminder, 'Reminder', { timeout: 3000, icon: 'img/check.png' });

                    }

                }

            }).catch( (error) => {
                showError('Error checking Matter take on reminder', error); 
            });

        },


        clearData() {

            this.docgenData = this.matterTypeData = this.party = this.colData = this.bondData = this.conveyData = {};
            
            //console.log('2 clearData',this.docgenData,this.matterTypeData,this.party,this.colData,this.bondData,this.conveyData);

            this.selectCauseOfAction.record = {};
        },

        isCollectionsMatter() {

            return this.docgenData?.type == 'LIT' && this.docgenData?.code != 'AMO' ? true : false;
        },

        isBondMatter() {

            return this.docgenData?.type == 'BON' ? true : false;
        },

        isTransfersMatter() {

            return this.docgenData?.type == 'TRN' ? true : false;
        },

        isConveyancingMatter() {

            return this.docgenData?.type == 'BON' || this.docgenData?.type == 'TRN' ? true : false;
        },

        showCauseOfAction() {
            return this?.record.docgenid == root.company.transfersdocgenid ? true : false;
        },

        showPlanOfAction() {
            return this.docgenData?.hideplanofactionflag == "1" ? false : true;
        },

        showExtraScreen() {
            return this.docgenData?.hideextrascreenflag == "1" ? false : true;
        },

        showStages() {
            return this.docgenData?.hidestagesflag == "1" ? false : true;
        },

        setGeneralTab() {

            this.activeTab = 'General';
            this.tabs[0].active = true;

            for (let index = 1; index < this.tabs.length; index++) {

                this.tabs[index].active = false;

            }
        },

        partySelected(id, code, name) {

            this.initNewRecord(id, code, name);

        },     


        invoicePartySelected(id, name) {

            this.record.invoicepartyid = id;

            this.selectInvoiceParty.party = {
                recordid: id,
                name: htmlDecode(name),
            };

        },

        branchSelected(id, description) {

            this.record.branchid = id;

            this.selectBranch.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        employeeSelected(id, name) {

            this.record.employeeid = id;

            this.selectEmployee.employee = {
                recordid: id,
                name: htmlDecode(name),
            };

        },          

        stageGroupSelected(id, description) {

            this.record.stagegroupid = id;

            this.selectStageGroup.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        trustBankSelected(id, description) {

            this.record.trustbankid = id;

            this.selectTrustBank.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },
        
        businessBankSelected(id, description) {

            this.record.businessbankid = id;

            this.selectBusinessBank.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        incomeAccountSelected(id, description) {

            this.record.incomeaccid = id;

            this.selectIncomeAccount.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        costCentreSelected(id, description) {

            this.record.costcentreid = id;

            this.selectCostCentre.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        languageSelected(id, description) {

            this.record.documentlanguageid = id;

            this.selectLanguage.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        accountsLanguageSelected(id, description) {

            this.record.accountslanguageid = id;

            this.selectAccountsLanguage.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },
        
        planOfActionSelected(id, description) {

            this.record.todogroupid = id;

            this.selectPlanOfAction.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        clientFeeSheetSelected(id, description) {

            this.record.clientfeesheetid = id;

            this.selectClientFeeSheet.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        debtorFeeSheetSelected(id, description) {

            this.record.debtorfeesheetid = id;

            this.selectDebtorFeeSheet.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        matterTypeSelected(selectedRecord) {

            this.matterTypeData = selectedRecord;

            this.record.mattertypeid = selectedRecord.recordid;

            this.selectMatterType.record = {
                recordid: selectedRecord.recordid,
                description: htmlDecode(selectedRecord.description),
            };

        },

        documentSetSelected(selectedRecord) {

            this.docgenData = selectedRecord;

            this.record.docgenid = selectedRecord.recordid;

            if ( this.record.docgenid != root.company.transfersdocgenid ) {
                this.conveyData.bondcauseid = "0";
            }

            this.selectDocumentSet.record = {
                recordid: selectedRecord.recordid,
                description: htmlDecode(selectedRecord.description),
            };

        },
        
        causeOfActionSelected(id, description) {

            this.conveyData.bondcauseid = id;

            this.selectCauseOfAction.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },
        
        extraScreenSelected(id, description) {

            this.record.extrascreenid = id;

            this.selectExtraScreen.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        billingRateSelected(id, description) {

            this.record.defaultbillingrateid = id;

            this.selectBillingRate.record = {
                recordid: id,
                description: htmlDecode(description),
            };

        },

        clearSelectBillingRate() {

            this.selectBillingRate.record = {
                recordid: null,
                description: '',
            };

            this.record.defaultbillingrateid = null;
            
        },

        adjustMatGroupTableColumns() {
            this.matGroupTable.table.columns.adjust;
        },

        adjustMatPartiesTableColumns() {
            this.matterPartiesTable.table.columns.adjust;
        },

        updateFeeAndDisbursementOptions() {
            
            if( this.feeSettings.feeOption == 2){
                
                    this.record.invoicefeeoption = 6;
                
            } else if ( this.feeSettings.feeOption == 1 && this.feeSettings.feeSeparatorOption == 0 && this.feeSettings.feeSummarizeFlag == 0){

                    this.record.invoicefeeoption = 1;

            } else if ( this.feeSettings.feeOption == 1 && this.feeSettings.feeSeparatorOption == 1 && this.feeSettings.feeSummarizeFlag == 0){
                
                    this.record.invoicefeeoption = 2 ;

            } else if ( this.feeSettings.feeOption == 1 && this.feeSettings.feeSeparatorOption == 0 && this.feeSettings.feeSummarizeFlag == 1){

                    this.record.invoicefeeoption = 3 ;

            } else if ( this.feeSettings.feeOption == 1 && this.feeSettings.feeSeparatorOption == 1 && this.feeSettings.feeSummarizeFlag == 1){

                    this.record.invoicefeeoption = 4 ;

            } else if ( this.feeSettings.feeOption == 0 && this.feeSettings.feeSummarizeFlag == 1){

                    this.record.invoicefeeoption = 5 ;
            } else {
                    this.record.invoicefeeoption = 0 ;
                }
            
            if ( this.disbursementSettings.disbursementOption == '2' ){
                if ( this.disbursementSettings.separateCreditorDisbursementOption == '1'){

                    this.record.invoicedisbursementoption = '11';
                
                } else {
                
                    this.record.invoicedisbursementoption = '6';
            }
            } else if ( this.disbursementSettings.disbursementOption == '3' ){

                        this.record.invoicedisbursementoption = '12';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '0' && this.disbursementSettings.disbursementSummarizeFlag == '0' && this.disbursementSettings.itemiseCreditorDisbursementOption == '0'){

                        this.record.invoicedisbursementoption = '1';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '1' && this.disbursementSettings.disbursementSummarizeFlag == '0' && this.disbursementSettings.itemiseCreditorDisbursementOption == '0'){

                        this.record.invoicedisbursementoption = '2';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '0' && this.disbursementSettings.disbursementSummarizeFlag == '1' && this.disbursementSettings.itemiseCreditorDisbursementOption == '0'){

                        this.record.invoicedisbursementoption = '3';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '1' && this.disbursementSettings.disbursementSummarizeFlag == '1' && this.disbursementSettings.itemiseCreditorDisbursementOption == '0'){

                        this.record.invoicedisbursementoption = '4';

            } else if ( this.disbursementSettings.disbursementOption == '0' && this.disbursementSettings.disbursementSummarizeFlag == '1'){

                        this.record.invoicedisbursementoption = '5';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '0' && this.disbursementSettings.disbursementSummarizeFlag == '0' && this.disbursementSettings.itemiseCreditorDisbursementOption == '1'){

                        this.record.invoicedisbursementoption = '7';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '1' && this.disbursementSettings.disbursementSummarizeFlag == '0' && this.disbursementSettings.itemiseCreditorDisbursementOption == '1'){

                        this.record.invoicedisbursementoption = '8';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '0' && this.disbursementSettings.disbursementSummarizeFlag == '1' && this.disbursementSettings.itemiseCreditorDisbursementOption == '1'){

                        this.record.invoicedisbursementoption = '9';

            } else if ( this.disbursementSettings.disbursementOption == '1' && this.disbursementSettings.disbursementSeparatorOption == '1' && this.disbursementSettings.disbursementSummarizeFlag == '1' && this.disbursementSettings.itemiseCreditorDisbursementOption == '1'){

                        this.record.invoicedisbursementoption = '10';

            } else{

                        this.record.invoicedisbursementoption = '0';
            }

        },

        setFeeAndDisbursementOptions() {

            if (!this.record.invoicefeeoption || this.record.invoicefeeoption == '0'){
                this.feeSettings.feeOption = '0';
                this.feeSettings.feeSeparatorOption = '0';
                this.feeSettings.feeSummarizeFlag = '0';

            } else if (this.record.invoicefeeoption == '1'){
                    this.feeSettings.feeOption = '1';
                    this.feeSettings.feeSeparatorOption = '0';
                    this.feeSettings.feeSummarizeFlag = '0';

            } else if (this.record.invoicefeeoption == '2'){
                    this.feeSettings.feeOption = '1';
                    this.feeSettings.feeSeparatorOption = '1';
                    this.feeSettings.feeSummarizeFlag = '0';
                    
            } else if (this.record.invoicefeeoption == '3'){
                    this.feeSettings.feeOption = '1';
                    this.feeSettings.feeSeparatorOption = '0';
                    this.feeSettings.feeSummarizeFlag = '1';
                    
            } else if (this.record.invoicefeeoption == '4'){
                    this.feeSettings.feeOption = '1';
                    this.feeSettings.feeSeparatorOption = '1';
                    this.feeSettings.feeSummarizeFlag = '1';
                    
            } else if (this.record.invoicefeeoption == '5'){
                    this.feeSettings.feeOption = '0';
                    this.feeSettings.feeSeparatorOption = '0';
                    this.feeSettings.feeSummarizeFlag = '1';
                    
            } else if (this.record.invoicefeeoption == '6'){
                    this.feeSettings.feeOption = '2';
                    this.feeSettings.feeSeparatorOption = '0';
                    this.feeSettings.feeSummarizeFlag = '0';
                
            }


            if (!this.record.invoicedisbursementoption || this.record.invoicedisbursementoption == '0'){

                this.disbursementSettings.disbursementOption = '0';
                this.disbursementSettings.separateCreditorDisbursementOption = '0';
                this.disbursementSettings.disbursementSummarizeFlag = '0';
                this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                this.disbursementSettings.disbursementSeparatorOption = '0';


            } else if (this.record.invoicedisbursementoption == '1'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '0';


            } else if (this.record.invoicedisbursementoption == '2'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '1';

                    
            } else if (this.record.invoicedisbursementoption == '3'){
                    this.disbursementSettings.disbursementOption = '0';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '0';

                    
            } else if (this.record.invoicedisbursementoption == '4'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '1';

                    
            } else if (this.record.invoicedisbursementoption == '5'){
                    this.disbursementSettings.disbursementOption = '0';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '0';

                    
            } else if (this.record.invoicedisbursementoption == '6'){
                    this.disbursementSettings.disbursementOption = '2';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '0';
                    
            } else if (this.record.invoicedisbursementoption == '7'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '1';
                    this.disbursementSettings.disbursementSeparatorOption = '0';
                    
            } else if (this.record.invoicedisbursementoption == '8'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '1';
                    this.disbursementSettings.disbursementSeparatorOption = '1';
                    
            } else if (this.record.invoicedisbursementoption == '9'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '1';
                    this.disbursementSettings.disbursementSeparatorOption = '0';
                    
            } else if (this.record.invoicedisbursementoption == '10'){
                    this.disbursementSettings.disbursementOption = '1';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '1';
                    this.disbursementSettings.disbursementSeparatorOption = '1';
                    
            } else if (this.record.invoicedisbursementoption == '11'){
                    this.disbursementSettings.disbursementOption = '2';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '0';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSeparatorOption = '1';
                    
            } else if (this.record.invoicedisbursementoption == '12'){
                    this.disbursementSettings.disbursementOption = '3';
                    this.disbursementSettings.separateCreditorDisbursementOption = '0';
                    this.disbursementSettings.disbursementSummarizeFlag = '1';
                    this.disbursementSettings.itemiseCreditorDisbursementOption = '1';
                    this.disbursementSettings.disbursementSeparatorOption = '1';
                
            }
        },

        invoiceFlagChanged(newValue) {

            console.log("invoiceFlagChanged, disable when none here");

        },

        consolidateMatterSelected(id, fileref, description) {

            this.record.consolidateid = id;

            console.log('consolidateMatterSelected this.record.consolidateid',id, this.record.consolidateid);

            this.selectConsolidateMatter.matter = {
                recordid: id,
                fileref: htmlDecode(fileref),
                description: htmlDecode(description),
            };



        },

        getUpdatedByDetails() {

            let returnData = '';

            let employee = this.record.updatedbyid ? root.employees.filter(employee => employee.recordid == this.record.updatedbyid)[0] : null;

            if (employee && this.record.updatedbydate && this.record.updatedbytime) {

                returnData = 'Last updated by ' + employee.name + ' on ' + convertFromClarionDate(this.record.updatedbydate)  + ' at ' + convertFromClarionTime(this.record.updatedbytime);

            }
            return returnData;

        },

        refreshFormTables() {

        },

        async okClicked() {

            // Check any required Extra Screen Fields
            if ( this.extraScreensVisibleFlag ) {

                let requiredField = await this.checkExtraScreenRequiredFields();

                if ( requiredField ) {
                    
                    this.setExtraScreenTab();                    

                    return;

                }

                //The only write back Tables are Matter, MatParty, ColData, BondData, ConveyData
                //Only add this to the Matter Form and MatParty Form
                await this.checkExtraWriteBackFields();

            }


            root.$snotify.simple('Please wait...', 'Saving Matter', { timeout: 10000, icon: 'img/cogs.gif' });

            this.saveMatter()

            .then( (matter) => {

                if (this.table) this.highlightTableRow(matter.recordid, matter.fileref);

                this.setCurrentMatter({
                    id: matter.recordid, 
                    fileRef: matter.fileRef,
                    description: matter.description
                });

                this.saveExtraScreens(); //Only does it if the user has clicked on the Extra Screen Tab

                if ( this.isCollectionsMatter() ) {

                    this.saveColData()

                    .then( () => {

                        root.$snotify.clear();
                        this.closeForm();

                    }).catch( () => {
                        root.$snotify.clear();
                    });

                } else if ( this.isConveyancingMatter() ) {

                    this.saveBondData()

                    .then( () => {

                        this.saveConveyData()

                        .then( () => {

                            root.$snotify.clear();

                            this.closeForm();

                        }).catch( () => {
                            root.$snotify.clear();
                        });

                    }).catch( () => {
                        root.$snotify.clear();
                    });

                } else {

                    root.$snotify.clear();

                    this.closeForm();

                }

            }).catch( () => {
                root.$snotify.clear();
            });

        },
        
        saveMatter() {

            return new Promise(async (resolve, reject) => {

                try {   

                    this.record.updatedbyid = loggedInEmployeeId;
                    this.record.updatedbydate = moment().format("DD MMM YYYY");
                    this.record.updatedbytime = moment().format("HH:MM:SS");

                    //If Inlist(MAT:ConsolidatedFlag,0,4) Then MAT:ConsolidateId = 0.
                    if ( this.record.consolidatedflag !== '0' || this.record.consolidatedflag !== '4') {
                        this.record.consolidatedid = '0';
                    }

                    // If ~LOC:AgreedFeeFlag
                    //     MAT:AgreedFeePercent = 0
                    //     MAT:AgreedFeeLimit = 0
                    // END
                    if ( !this.record.agreedfeeflag || this.record.agreedfeeflag == '0'){
                        this.record.agreedfeepercent = '0';
                        this.record.agreedfeelimit = '0';
                    }

                    // MAT:LastDistributionNo = LOC:NextDistributionNo - 1
                    // If MAT:LastDistributionNo < 0 Then MAT:LastDistributionNo = 0.
                    // If ~LOC:InvoicePartyFlag Then MAT:InvoicePartyId = 0.



                    this.record.archivedate = this.record.formattedarchivedate;
                    this.record.courtdate = this.record.formattedcourtdate;
                    this.record.dateinstructed = this.record.formatteddateinstructed;
                    this.record.importantdate = this.record.formattedimportantdate;
                    this.record.interestfrom = this.record.formattedinterestfrom;
                    this.record.prescriptiondate  = this.record.formattedprescriptiondate;
                
                    this.record.prescriptiondate  = this.record.formattedprescriptiondate;
                    
                    this.record.branchflag = this.selectBranch.record.id ? '1' : '0';

                    this.updateFeeAndDisbursementOptions();

                    // PHP doesn't send nulls
                    this.record.queryString = jQuery.param(this.record);

                    let response = await axios.post('/matters/store', this.record )

                    console.log('/matters/store response',response);

                    if (response.data.errors || response.data.error) {

                        if (response.data.errors) { 
                            showError('Error saving Matter', response.data.errors); 
                            reject();
                        } else { 
                            showError('Error saving Matter', response.data.error[0]); 
                            this.errors = response.data.error; 
                            reject();
                        }

                    } else {

                        this.errors = {};

                        resolve(response.data.data[0]);

                    }

                } catch(error) { 

                    showError('Error saving Matter', error); 

                    reject();
                };
                
            });

        },

        saveColData() {

            return new Promise(async (resolve, reject) => {

                try {

                    this.colData.queryString = jQuery.param(this.colData);
                    
                    this.colData.ptpstartdate = this.colData.formattedptpstartdate;

                    let response = await axios.post('/generic/store', {... this.colData, tableName: 'coldata'})

                    if (response.data.errors || response.data.error) {

                        if (response.data.errors) { 
                            showError( 'Error', response.data.errors);
                            reject();
                        } else { 
                            this.errors = response.data.error; 
                            reject();
                        }

                    } else {

                        this.errors = {};

                        resolve(response.data.data[0]);

                    }

                } catch(error) { 

                        showError('Error saving ColData', error); 

                        reject();
                };
                    
            });
        },

        saveBondData() {

            return new Promise(async (resolve, reject) => {

                try {

                    this.bondData.queryString = jQuery.param(this.bondData);
                    
                    let response = await axios.post('/generic/store', {... this.bondData, tableName: 'bonddata'})

                    if (response.data.errors || response.data.error) {

                        if (response.data.errors) { 
                            showError( 'Error', response.data.errors);
                            reject();
                        } else { 
                            this.errors = response.data.error; 
                            reject();
                        }

                    } else {

                        this.errors = {};

                        resolve();

                    }

                } catch(error) { 

                        showError('Error saving BondData', error); 

                        reject();
                };
                    
            });
        },

        saveConveyData( matter ) {

            return new Promise(async (resolve, reject) => {

                try {

                    this.conveyData.queryString = jQuery.param(this.conveyData);
                    
                    let response = await axios.post('/generic/store', {... this.conveyData, tableName: 'conveydata'})

                    if (response.data.errors || response.data.error) {

                        if (response.data.errors) { 
                            showError( 'Error', response.data.errors);
                            reject();
                        } else { 
                            this.errors = response.data.error; 
                            reject();
                        }

                    } else {

                        this.errors = {};

                        resolve(response.data.data[0]);

                    }

                } catch(error) { 

                        showError('Error saving ConveyData', error); 

                        reject();
                };
                    
            });
        },

        highlightTableRow( id, fileRef ) {

            axios.post('/matters/getTablePosition', {column: fileRef})

            .then(response => {

                if (response.data.errors) { 

                    showError( 'Error', response.data.errors);

                } else {

                    this.table.jumpToRow(id, response.data.data);

                }

            }).catch( (error) => {
                showError('Error getting Matter Table Position', error); 
            });

        },    

        pageTitle() {
            
            return (this.record.fileref) ? this.record.fileref + (this.record.description ? ' - ' + this.record.description : '') : '';

        },

    },

}  
</script>
