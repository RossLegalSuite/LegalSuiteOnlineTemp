
<template>
    <div class="modal" :id="id">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content" style="border-color: indianred;">

            <div class="modal-header indianred">
                <h3 class="modal-title"><i class="fa fa-filter mr-2"></i>Filter Parties</h3>
                <i title="Close this window" class="cp top-right fa fa-times-circle fa-2x text-white" data-dismiss="modal"></i>
            </div>

            <div class="modal-body p-3" style="height: 50vh; overflow-y: auto;">

                <div class="form-group row">
                
                    <div class="col-md-5">
                        <label>Clients</label>

                        <i v-show="clientStatus" class="fa fa-times-circle cp text-danger ml-1" style="font-size: large" title="Clear the existing filter" @click="clearClientStatus"></i>

                        <v-select
                            title="Filter the Parties by their Role as a Client"
                            :options="clientStatusOptions" 
                            :clearable="false" 
                            :searchable="false" 
                            :reduce="clientStatusOptions => clientStatusOptions.value"
                            v-model="clientStatus"
                        />
                
                    </div>
                </div>

                <div class="form-group row">

                    <select-party-entity
                        :clearIcon="partyEntityFilterFlag ? true : false"
                        clearIconCallback="clearPartyEntityFilter"
                        _class="col-md-6"
                        :id="id + '-select-party-entity'" 
                        :ref="id + '-select-party-entity'" 
                        :formRef="id + '-select-party-entity'" 
                    />

                    <select-party-type
                        :clearIcon="partyTypeFilterFlag ? true : false"
                        clearIconCallback="clearPartyTypeFilter"
                        _class="col-md-6"
                        :id="id + '-select-party-type'" 
                        :ref="id + '-select-party-type'" 
                        :formRef="id + '-select-party-type'" 
                    />

                </div>

            </div>

            <div class="modal-footer justify-content-between">
                <div>
                    <button class="btn btn-primary form-button mr-2" type="button" @click="loadAdvancedFilters" title="Advanced Filtering options"><i class="fa fa-cog fa-lg mr-2"></i>Advanced</button>
                </div>
                <div>
                    <button class="btn btn-danger form-button" type="button" @click="hide" title="Close this screen"><i class="fa fa-times-circle fa-lg mr-2"></i>Close</button>
                </div>
            </div>

            </div>
        </div>
    </div>
</template>

<script>

import modalTemplate from "@components/modals/modal-template";
import filterMethods from "@components/filters/filter-methods";

export default {

    mixins: [modalTemplate, filterMethods],

    components: {
        SelectPartyType: () => import("@pages/parties/SelectPartyType"),
        SelectPartyEntity: () => import("@pages/parties/SelectPartyEntity"),
    },

    data() {

        return {
            parent: null,
            partyEntityFilterFlag: false,
            partyTypeFilterFlag: false,
            partyEntityFilterKey: null,
            partyEntityFilterColumnName: 'Entity.Description',
            partyTypeFilterKey: null,
            partyTypeFilterColumnName: 'ParType.Description',

            clientStatus: null,
            clientStatusFilterColumnName: 'isClient',
            clientStatusOptions : [ 
                {value:'0', label: 'Parties who are not Clients'},
                {value:'1', label: 'Parties who are Clients'},
            ],

        }

    },

    watch: {

        partyEntityFilterFlag: function (newValue) {

            if (newValue === false) {
                this.selectPartyEntity.record = {};
            } else {
                let filter = this.getFilter(this.partyEntityFilterKey);
                if ( filter !== null ) this.selectPartyEntity.record = {description: filter.settings.value};
            }
        },

        partyTypeFilterFlag: function (newValue) {
            if (newValue === false) {
                this.selectPartyType.record = {};
            } else {
                let filter = this.getFilter(this.partyTypeFilterKey);

                if ( filter !== null ) this.selectPartyType.record = {description: filter.settings.value};
            }
        },

        clientStatus: function (newValue) {

            let optionSelected = newValue ? this.clientStatusOptions.filter(option => option.value === newValue)[0] : null;

            this.setClientStatusFilter(optionSelected);

        },


    },    

    methods: {

        modalOpened() {

            // Prime the Client Status Dropdown
            this.clientStatusFilterKey = this.getFilterName(this.clientStatusFilterColumnName);
            this.clientStatusFilter = this.getFilter(this.clientStatusFilterKey);
            let clientStatusFilteredFlag = this.clientStatusFilter ? true : false;

            if (clientStatusFilteredFlag) {
                this.clientStatus = this.clientStatusFilter.settings.value;
            }


            //Prime the DropDown filters
            this.partyEntityFilterKey = this.getFilterName(this.partyEntityFilterColumnName);
            this.partyEntityFilter = this.getFilter(this.partyEntityFilterKey);
            this.partyEntityFilterFlag = this.partyEntityFilter ? true : false;
            this.selectPartyEntity.record = this.partyEntityFilterFlag ? {description: this.partyEntityFilter.settings.value} : {};

            this.partyTypeFilterKey = this.getFilterName(this.partyTypeFilterColumnName);
            this.partyTypeFilter = this.getFilter(this.partyTypeFilterKey);
            this.partyTypeFilterFlag = this.partyTypeFilter ? true : false;
            this.selectPartyType.record = this.partyTypeFilterFlag ? {description: this.partyTypeFilter.settings.value} : {};

        },

        partyEntitySelected(id, description) {

            this.deleteFilter(this.partyEntityFilterKey);

            this.addFilter(this.partyEntityFilterColumnName, this.partyEntityFilterKey, description);

            this.partyEntityFilterFlag = true;

            this.reloadTable();

        },

        clearPartyEntityFilter() {

            this.deleteFilter(this.partyEntityFilterKey);

            this.partyEntityFilterFlag = false;

            this.reloadTable();

        },

        partyTypeSelected(id, description) {

            this.deleteFilter(this.partyTypeFilterKey);

            this.addFilter(this.partyTypeFilterColumnName, this.partyTypeFilterKey, description);

            this.partyTypeFilterFlag = true;

            this.reloadTable();

        },

        clearPartyTypeFilter() {

            this.deleteFilter(this.partyTypeFilterKey);

            this.partyTypeFilterFlag = false;

            this.reloadTable();

        },

        clearClientStatus() {

            this.clientStatus = null;
        },

        setClientStatusFilter( optionSelected ) {

            this.deleteFilter(this.clientStatusFilterKey);

            if ( optionSelected ) {

                this.addFilter(this.clientStatusFilterColumnName, this.clientStatusFilterKey, optionSelected.value, optionSelected.value, 'Equal to', null, optionSelected.label);

            }

            this.parent.setUserFilters();

            this.parent.table.ajax.reload();


        },



    }   
}  
</script>