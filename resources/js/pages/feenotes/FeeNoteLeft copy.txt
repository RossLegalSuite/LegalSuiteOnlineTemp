<template>
    <div class="card h-100 border-0">
        <div class="card-header feenotes-bg">
            <div class="d-flex justify-content-between">
                <h3><i class="fa fa-money mr-2"></i>Fee Notes</h3>
                <page-close-button @closeClicked="closeLeftPage(pageName)"/>
            </div>
        </div>

        <div id="fee-note-left-body" class="card-body overflow-auto pb-0 pt-3 px-3">

            <fee-note-table
                :lazy-load-flag="true"
                :tagging="true"
                form-ref="fee-note-form" 
                ref="fee-notes-table" 
                tableId="fee-notes-table"
                parentType="General"
            />

        </div>

        <select-fee-codes :formControls="false" id="fee-note-left-select-fee-codes" ref="fee-note-left-select-fee-codes" formRef="fee-note-left-select-fee-codes"/> 
        <select-matter :formControls="false" id="fee-note-left-select-matter" ref="fee-note-left-select-matter" formRef="fee-note-left-select-matter"/> 
        <add-fee-notes id="fee-note-left-add-fee-notes" ref="fee-note-left-add-fee-notes"/> 

    </div>
</template>     

<script>

import { mapGetters } from 'vuex';
import { mapMutations } from 'vuex';
import leftTemplate from "../left-template";

export default {

    extends: leftTemplate,

    components: {
        FeeNoteTable: () => import("./FeeNoteTable"),
        AddFeeNotes: () => import("./AddFeeNotes"),
        SelectFeeCodes: () => import("@pages/feecodes/SelectFeeCodes"),
        SelectMatter: () => import("@pages/matters/SelectMatter"),
    },

    data() {
        return {
            pageName: "FeeNotes",
            selectedRows: [],
            selectedAllFlag: false,
            tableMounted: false,
            selectedMatterId: null,
        };
    },

    computed: {
        ...mapGetters(['leftTabs', 'activeLeftTabs']),
    },

    watch: {

        tableMounted() { this.initializeTable(); },

    },


    mounted() {

        let thisTab = this.leftTabs.filter(tab => tab.pageName === this.pageName);

        if (thisTab.length)  this.displayLeftTab(thisTab[0]);

    },    

    methods: {

        ...mapMutations(['displayLeftTab','hideLeftTab']),

        initializeTable() {

            // Order by Date descending
            this.table.initialOrder = [[2, "desc"]];

            this.table.tableOptions = { tableBottom: 80 }; 

            // Used to lazy load the Form (and all its sub components) on the right
            this.table.loadDataTable(() =>{
                this.$root.feeNoteLeftTableLoaded = true;
            });

        },

        newRecordButtonClicked() {

            let thisForm = root.$refs['pages'].$refs["right-page"].$refs['fee-note-form'];

            thisForm.insertClicked();

        },

        selectFeeCode() {

            this.selectMatter.selectMatter(this);

        },

        matterSelected(id) {

            this.selectedMatterId = id;

            axios.post('/matters/get',{
                id: id,
                basicColumns: true
            })

            .then(response => {

                this.selectFeeCodes.selectFeeCodes(response.data.data[0].feeSheetId);
            });

        },


        async feeCodesSelected(selectedRows, feeSheetId) {

            axios.post('/feecodes/getFeeItems', {
                feeCodes: selectedRows,
                feeSheetId: feeSheetId,
            })
            
            .then(response => {

                if (response.data.error) {

                    showError( 'Error', response.data.error);

                } else {

                    const dateNow = moment().format(root.control.dateformat + ' HH:mm:ss');

                    response.data.feeItems.forEach(feeItem => {
                        feeItem.allocatedToId = loggedInEmployeeAllocateToId;
                        feeItem.allocatedEmployeeName = loggedInEmployeeAllocateToName;
                        feeItem.dateTime = dateNow;
                        feeItem.originalAmount = feeItem.amount;
                    });

                    this.addFeeNotes.show();

                    this.addFeeNotes.loadDataTable(response.data.feeItems, dateNow);

                }

            }).catch(error => { showError('Error getting Fee Items', error); });

        },

        deleteTaggedRecords() {

            this.tryDeleteTaggedRecords('feenotes');

        },

    },
}
</script>