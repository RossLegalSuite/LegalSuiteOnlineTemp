<template>
<div :class="formControls ? _class : ''" :style="_style">
        
    <div v-show="formControls">
        
        <label>{{label}}</label>
        <span v-if="popOver">   
            <pop-over :content="popOver" :container="popOverContainer ? popOverContainer : $parent.modal ? '#' + $parent.id : 'body'"/>
        </span>
        <span v-if="clearIcon">
            <i class="fa fa-times-circle cp text-danger ml-1 clear-icon" style="font-size: large" title="Clear this setting" @click="clearIconClicked"></i>
        </span>
        <div class="input-group">

            <input
                :value="matter.fileref ? matter.fileref + ' ' + matter.description : ''"
                class="form-control"
                readonly
            />

            <div v-if="!readOnly" class="input-group-append">
                <button
                    tabindex="-1"
                    v-on:click="selectMatter(null)"
                    type="button"
                    :title="'Select a ' + singular"
                    :class="error[0] ? 'btn btn-danger multiselect-invalid-feedback' : 'btn btn-primary'"
                ><i class="fa fa-cog"></i></button>
            </div>
        </div>
        <div v-html="error[0]" class="invalid-feedback"></div>


    </div>

    <div class="modal" :id="id">

        <div class="modal-dialog modal-dialog-left modal-lg">

            <div class="modal-content" style="border-color:indianred">

                <div class="modal-header indianred">
                    <h2 class="modal-title page-title"><i class="fa fa-server mr-2"></i>Select a {{singular}}</h2>
                    <i title="Close this window" class="cp top-right fa fa-times-circle fa-2x text-white" data-dismiss="modal"></i>
                </div>

                <div class="modal-body p-3" style="height: 70vh; overflow-y: auto;">
                    
                    <matter-table
                    :options-button="false"
                    :new-record-button="true"
                    :table-id="id + '-table'"
                    :lazyLoadFlag="true"
                    :ref="id + '-select-matter-table'"
                    :form-ref="formRef"
                    />

                </div>

                <div class="modal-footer justify-content-between">

                    <div>
                        <modal-table-filter-footer/>
                    </div>

                    <div>
                        <button class="btn btn-danger form-button" type="button"  v-on:click="hide" title="Cancel selection"><i class="fa fa-times-circle fa-lg mr-2"></i>Cancel</button>
                    </div>

                </div>

            </div>

        </div>

    </div>

</div>
</template>

<script>

import { mapMutations } from 'vuex';
import modalTemplate from "@components/modals/modal-template";

export default {

    mixins: [modalTemplate],       

    components: {
        MatterTable: () => import("./SelectMattersTable"),
    },

    props: {
        clearIconCallback: { type: String, default: 'clearSelectMatter' },
        clearIcon: { type: Boolean, default: false },
        title: {
            type: String,
            default: 'Click on the button to select a Matter',
        },
        callback: {
            type: String,
            default: 'matterSelected',
        },  
        parentName: {
            type: String,
            default: 'selectMatter',
        }, 
        _class: {
            type: String, 
            default: 'col-md-12',
        },
        _style: {
            type: String,
            default: '',
        },
        label: {
            type: String,
            default: 'Matter',
        },
        singular: {
            type: String,
            default: 'Matter',
        },
        plural: {
            type: String,
            default: 'Matters',
        },
        formRef: String,
        formControls: {
            type: Boolean,
            default: true,
        },
        readOnly: {
            type: Boolean,
            default: false,
        },
        tableOnly: {
            type: Boolean,
            default: false,
        },
        popOver: { type: String, default:'' },
        popOverContainer: { type: String, default:'' },
        error: {
            type: Array,
            default: function () {
                return [null]
            },
        },
    },

    data() {
        return {
            callingComponent: null,
            table: null,
            matter: {},
            disabled: null,
            parentId: null,
        };
    },

    mounted () {
        this.$parent[this.parentName] = this;
    },    

    methods: {

        ...mapMutations(['setCurrentMatter']),

        clearIconClicked() {
            if ( typeof this.$parent[this.clearIconCallback] === 'function') {

                this.$parent[this.clearIconCallback]();

            } else if ( typeof this.$parent[this.parentName + 'ClearIconCallback'] === 'function') {
                this.$parent[this.parentName + 'ClearIconCallback']();
            }
        },

        newRecordButtonClicked() {

            let matterForm = this.$root.$refs['pages'].$refs['globalMatterForm'];

            matterForm.table = this.$refs[this.id + '-select-matter-table'];

            matterForm.insertClicked();

        },

        selectMatter( callingComponent ) {

            // Work out the callingComponent because the global matter form also has a SelectMatter
            // It is best practice to set it in the component that uses SelectMatter
            // e.g. this.selectMatter.callingComponent = this;

            if ( !this.callingComponent && callingComponent && callingComponent._isVue ) this.callingComponent = callingComponent;

            if ( !this.callingComponent && this.$parent._isVue && typeof this.$parent[this.callback] === 'function') this.callingComponent = this.$parent;

            if ( !this.callingComponent ) {
                console.error("No Calling Component specified in SelectMatter");
                return;
            }

            this.show();

            if ( this.parentId ) {
                this.table.whereRaw = "matter.clientid = " + this.parentId;
            } else {             
                this.table.whereRaw = null;
            }

            this.table.selectTableFlag = true;

            this.table.actionColumnWidth = 12;

            //Prevent re-loading the table all the time

            if ( !this.previousWhere ) {

                setTimeout( this.table.loadDataTable );

                this.previousWhere = this.table.where ? this.table.where : 'Empty';

            } else if ( this.previousWhere != this.table.where ? this.table.where : 'Empty' ) {

                setTimeout( this.table.loadDataTable );

                this.previousWhere = this.table.where ? this.table.where : 'Empty';

            }

        },

        recordSelected(selectedRecord) {

            this.matter = {
                recordid: selectedRecord.recordid,
                fileref: htmlDecode(selectedRecord.fileref),
                description: htmlDecode(selectedRecord.description),
            };

            this.setCurrentMatter(selectedRecord);
            //this.setCurrentMatter(this.matter);

            // Override default one set in form-template.js
            if ( typeof this.callingComponent.customMatterSelected === 'function') {
                
                this.callingComponent.customMatterSelected(selectedRecord);

            } else if ( typeof this.callingComponent[this.callback] === 'function') {

                this.callingComponent[this.callback](selectedRecord);

            }

        },        

        selectRecord(id) {

            this.recordSelected( this.table.table.row('#' + id).data() );

            this.hide();


            // axios.post('/matter/get/' + id)

            // .then(response => {

            //     console.log("Axios got Matter this.callingComponent",this.callingComponent);
            //     console.log("Axios this.id",this.id);

            //     //this.recordSelected(response.data.data[0]);
            //     //this.hide();

            // }).catch( (error) => {
            //     showError('Error',error)
            // });
    


        },

        // Used by CustomFilterForm.vue
        setByFileRef(fileRef) {

            axios.post('/matters/get',{ whereRaw: "fileRef = '" + fileRef + "'"})
            .then(response => { 
                this.matter = response.data.data[0]; 
            }).catch( (error) => {
                showError('Error getting Matter by File Ref', error); 
            });

        },


    },

}  
</script>

