<template>

<div :id="id" :class="modal ? 'modal': ''">
    
    <div :class="modal ? 'modal-dialog modal-dialog-centered modal-lg' : ''">

        <div :class="modal ? 'modal-content steelblue-border':'card h-100 border-0'">

            <div :class="modal ? '':'card-header'">

                <div :class="modal ? 'modal-header steelblue' : 'd-flex justify-content-between'">

                    <div class="page-title">
                        <h3>
                            <span v-if="!editing">Fee Item will be Added</span>
                            <span v-else>Fee Item will be Changed</span>
                        </h3>
                        <i v-if="modal" title="Close this window" class="cp top-right fa fa-times-circle fa-2x text-white" data-dismiss="modal"></i>
                    </div>

                    <page-close-button v-if="!modal" @closeClicked="closeForm"/>

                </div>

            </div>

            <div class="card-body form-tab-body overflow-auto p-3" :style="modal ? 'min-height:65vh' : ''">

                <form-tabs :tabs="tabs"/>

                <div v-show="activeTab === 'General'" class="form-tab-content">

                    <div class="form-group row">
                        <text-input 
                        _class="col-md-12"
                        v-model="record.description"
                        name="description"
                        label="Description"
                        :error="errors.description"
                    />

                    </div>

                    <div class="form-group row">

                        <radio-buttons 
                            popOver="<h4>Type</h4>
                            <p>A Fee Item can create Fee Notes as well as Disbursements.</p>
                            <p>Indicate here whether a Fee or a Disbursement must be created by this item.</p>"
                            :popOverContainer="'#' + id"
                            _class="col-md-6"
                            :record="record"
                            column="type"
                            :buttons="[{value:'Fee', text: 'Fee'},{value:'Disbursement', text: 'Disbursement'}]"
                            name="type"
                            label="Type"
                            :error="errors.type"
                        />


                    </div>

                    <div class="form-group row">

                        <text-input @input="calculateTotalAmount" _class="col-md-4" :readOnly="false" type="number" input-class="form-input-number" v-model="amountString" name="amount" :label="'Amount ' + $root.salesTaxHint()" :error="errors.amount" />

                        <text-input v-show="$root.company.salesTaxFlag" _class="col-md-4" :readOnly="true" :vatInputFlag="true" :vatInputCallback="this"  input-class="form-input-number" v-model="taxAmountString" name="taxAmount" :label="salesTaxDescription"/>

                        <text-input v-show="$root.company.salesTaxFlag" @input="calculateNetAmount" _class="col-md-4" type="number" input-class="form-input-number" v-model="totalAmountString" name="totalAmount" :label="'Amount ' + $root.salesTaxHint('incl')" :error="errors.totalAmount" />

                    </div>
                </div>

                <div v-show="activeTab === 'Limits'" class="form-tab-content">

                    <div class="form-group row">

                        <select-fee-sheet
                            _class="col-md-12"
                            popOver="<h4>Fee Sheet</h4>
                            <p>A Fee Item can be limited to a specific Fee Sheet or multiple Fee Sheets.</p>
                            <p>When a Fee Code is selected, only those Fee Items that correspond to the Matter's Fee Sheet will be inserted.</p>
                            <p>If a Fee Item applies to <em>all</em> Fee Sheets, leave this blank.</p>"
                            :popOverContainer="'#' + id"
                            :id="id + '-select-fee-sheet'" 
                            :ref="id + '-select-fee-sheet'" 
                            :formRef="id + '-select-fee-sheet'"
                        />
                    </div>

                    <div class="form-group row">

                        <div class="col-md-4">
                            <label>From Date</label>
                            <pop-over :container="'#' + id" content="
                            <h4>From Date</h4>
                            <p>This Fee Item will be inserted if the Fee Note date is greater than or equal to this date.</p>
                            "/>

                            <div class="input-group">
                                <date-picker 
                                    @dp-change="hideFromDatePicker" 
                                    ref="fromDatePickerComponent" 
                                    v-model="record.fromDate" 
                                    :config="$root.datePickerOptions"
                                />
                                <div class="input-group-append">
                                    <button
                                        tabindex="-1"
                                        type="button"
                                        title="Click here to select a date"
                                        v-on:click="toggleFromDatePicker"
                                        class="btn btn-primary"
                                    ><i class="fa fa-calendar"></i>
                                    </button>
                                </div>
                            </div>
                            <div v-if="errors.fromDate" v-html="errors.fromDate[0]" class="invalid-feedback"></div>
                        </div>

                        <div class="col-md-4">
                            <label>To Date</label>
                            <pop-over :container="'#' + id" content="
                            <h4>To Date</h4>
                            <p>This Fee Item will be inserted if the Fee Note date is less than or equal to this date.</p>
                            "/>
                            <div class="input-group">
                                <date-picker 
                                    @dp-change="hideToDatePicker" 
                                    ref="toDatePickerComponent" 
                                    v-model="record.toDate" 
                                    :config="$root.datePickerOptions"
                                />
                                <div class="input-group-append">
                                    <button
                                        tabindex="-1"
                                        type="button"
                                        title="Click here to select a date"
                                        v-on:click="toggleToDatePicker"
                                        class="btn btn-primary"
                                    ><i class="fa fa-calendar"></i>
                                    </button>
                                </div>
                            </div>
                            <div v-if="errors.toDate" v-html="errors.toDate[0]" class="invalid-feedback"></div>
                        </div>

                    </div>

                    <div class="form-group row">

                        <text-input 
                            _class="col-md-4"
                            popOver="<h4>From Amount</h4>
                            <p>This Fee Item will be inserted if the <em>quantum</em> of the Matter is greater than or equal to this amount.</p>"
                            :popOverContainer="'#' + id"
                            type="number" 
                            input-class="form-input-number" 
                            v-model="record.fromAmount" 
                            name="fromAmount" 
                            label="From Amount" 
                            :error="errors.fromAmount"
                        />

                        <text-input 
                            _class="col-md-4"
                            popOver="<h4>To Amount</h4>
                            <p>This Fee Item will be inserted if the <em>quantum</em> of the Matter is less than or equal to this amount.</p>"
                            :popOverContainer="'#' + id"
                            type="number" 
                            input-class="form-input-number" 
                            v-model="record.toAmount" 
                            name="toAmount" 
                            label="To Amount" 
                            :error="errors.toAmount"
                        />

                    </div>


                </div>

                <div v-show="activeTab === 'Units'" class="form-tab-content">

                    <div class="form-group row">

                        <div class="col-md-12">

                            <b-form-checkbox
                                :id="id + '-use-units-flag'"
                                v-model="record.unitsFlag"
                                name="useUnitsFlag"
                                value="1"
                                unchecked-value="0"
                                >
                                Use units
                            </b-form-checkbox>

                        </div>
                    </div>

                    <div v-show="record.unitsFlag == 1" class="form-group row">
                        <select-fee-unit
                            _class="col-md-8"
                            :id="id + '-select-unit'"
                            popOver="<h4>Units</h4>
                            <p>When creating a Fee (or Disbursement) from a Fee Item, the program will ask for the number of units
                            and the Amount will be divided by the <em>Factor</em> to calculate the Amount of the Fee (or Disbursement).</p>"
                            :popOverContainer="'#' + this.id"
                            title="The units used by this Fee Item"
                            :ref="id + '-select-unit'" 
                            :formRef="id + '-select-unit'"
                            :error="errors.unitsId"
                        />

                        <text-input 
                            _class="col-md-4"
                            popOver="<h4>Factor</h4>
                            <p>In some cases, the units may be a multiple of a larger unit. 
                            For example, a folio is typically 100 words. If you wanted to debit per folio, but only knew how many <em>words</em> were in a document, 
                            you could create a Unit called <strong>Folio</strong>, 
                            with the <em>singular</em> and <em>plural</em> as <strong>word</strong> and <strong>words</strong>.</p>
                            <p>You would then set the <em>Factor</em> to 100 and the Fee Item will then prompt the user for <em>the number of words</em> 
                            and multiply the Amount by the number of words divided by 100 when creating the Fee (or Disbursement).</p>"

                            :popOverContainer="'#' + id"
                            type="number" 
                            input-class="form-input-number" 
                            v-model="record.unitsFactor" 
                            name="unitsFactor" 
                            label="Factor" 
                            :error="errors.unitsFactor"
                        />

                    </div>

                    <div v-show="record.unitsFlag == 1" class="form-group row">

                        <text-input 
                            _class="col-md-4"
                            popOver="<h4>Maximum Amount</h4>
                            <p>The amount of the Fee Item cannot be greater than this amount.</p>"
                            :popOverContainer="'#' + id"
                            type="number" 
                            input-class="form-input-number" 
                            v-model="record.maximumAmount" 
                            name="maximumAmount" 
                            label="Maximum Amount" 
                            :error="errors.maximumAmount"
                        />

                    </div>


                </div>


            </div>

            <form-buttons :editing="editing" :viewing="viewing" :readOnly="record.readOnly ? true: false" record="Fee Item" @ok-clicked="okClicked" @cancel-clicked="closeForm" @delete-clicked="deleteClicked"/>

        </div>
    </div>

    <select-fee-sheets :id="id + '-select-fee-sheets'" :ref="id + '-select-fee-sheets'" :formRef="id + '-select-fee-sheets'"/>

</div>

</template>    

<script>

import FormTemplate from "@pages/form-template";
import modalTemplate from "@components/modals/modal-template";

export default {
    
    mixins: [FormTemplate, modalTemplate],

    components: {
        SelectFeeUnit: () => import("@pages/feeunits/SelectFeeUnit"),
        SelectFeeSheets: () => import("@pages/feesheets/SelectFeeSheets"),
        SelectFeeSheet: () => import("@pages/feesheets/SelectFeeSheet"),
    },


    props: {
        resource: {type: String, default: 'Fee Items' },
    },

    data() {
        return {
            amount: 0,
            taxAmount: 0,
            totalAmount: 0,
            amountString: '',
            taxAmountString: '',
            totalAmountString: '',
            taxRatePercentage: 0,
            salesTaxDescription: '&nbsp;',
            activeTab: 'General',
            tabs: [
                {
                    pageName: "General",
                    title: "Details",
                    iconClass: '',
                    visible: true,
                    active: true,
                },
                {
                    pageName: "Limits",
                    title: "Limits",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
                {
                    pageName: "Units",
                    title: "Units",
                    iconClass: '',
                    visible: true,
                    active: false,
                },
            ],

        }
    },

    methods: {

        editRecord(id) {

            axios.post('/feeitems/get',{id: id})

            .then(response => {

                this.record = response.data[0];

                this.initFormData();

            });

        },

        initNewRecord( feeCodeId ) {

            this.activeTab = 'General';
            this.tabs[0].active = true;
            this.tabs[1].active = false;
            this.tabs[2].active = false;

            this.record = {
                feeCodeId: feeCodeId,
                description: null,
                sorter: null,
                amount: null,
                taxAmount: null,
                taxRateId: this.record.taxRateId ? this.record.taxRateId : root.company.salesTaxRateId,
                type: this.record.type || 'Fee',
                fromDate: null,
                toDate: null,
                fromAmount: null,
                toAmount: null,
                maximumAmount: null,
                unitsFlag: '0',
                unitsId: null,
                unitsFactor: '1',

            };

            this.initFormData();

        },

        initFormData() {

            if ( !this.$root.feeSheets.length) this.$root.getFeeSheets();
            if ( !this.$root.feeUnits.length) this.$root.getFeeUnits();

            this.initSelectTaxRate();

            if ( this.editing ) {

                axios.post('/feeitems/getFeeSheets', {id: this.record.id})

                .then(response => {

                    this.selectFeeSheet.record = response.data.feesheets;

                });

                this.selectFeeUnit.record = {
                    id: this.record.unitsId,
                    description: htmlDecode(this.record.unitsDescription),
                };

            } else {

                this.selectFeeSheet.record = [];

                this.selectFeeUnit.record = {};

            }



            this.displayForm();

            setTimeout(() => $('#' + this.id + ' input[name="description"]').focus() );

        },

        selectRecord(id) {

            axios.post('/feeitems/get',{id: id}).then(response => {

                if ( typeof this.$parent.feeItemSelected === 'function') this.$parent.feeItemSelected(response.data[0]);

            });

        },

        feeSheetsSelected(selectedRows, table) {

            // Returns empty array if all are selected
            let params = ( selectedRows.length ) ? { whereIn: { column: 'fee_sheets.id', value: selectedRows } } :  {tableFilter: table.tableFilter, tableHaving: table.tableHaving};

            params = {...params, orderBy: 'fee_sheets.description'};

            axios.post('/feesheets/get', params)

            .then(response => {

                this.selectFeeSheet.record = response.data;

            });

        },


        feeUnitSelected(id, description) {

            this.record.unitsId = id;

            this.selectFeeUnit.record = {
                id: id,
                description: description,
            };

        },




        okClicked() {

            this.record.amount = this.amount;
            this.record.taxAmount = this.taxAmount;

            axios.post('/feeitems/store', {...this.record, feeSheets: this.selectFeeSheet.record})
            
            .then(response => {

                if (response.data.errors) {

                    if (response.data.errors.general) { showError( 'Error', response.data.errors.general[0]);} else { this.errors = response.data.errors; }

                } else {

                    this.errors = {};

                    this.highlightTableRow(response.data.id, response.data.sorter);

                }

            }).catch(error => { showError('Error saving ' + this.table.singular, error); });

        },


        toggleFromDatePicker() {
            this.$refs.fromDatePickerComponent.elem.data('DateTimePicker').toggle();
        },
        toggleToDatePicker() {
            this.$refs.toDatePickerComponent.elem.data('DateTimePicker').toggle();
        },

        hideFromDatePicker() {
            this.$refs.fromDatePickerComponent.elem.data('DateTimePicker').hide();
        },

        hideToDatePicker() {
            this.$refs.toDatePickerComponent.elem.data('DateTimePicker').hide();
        },


        highlightTableRow( id, sorter ) {

            axios.post('/feeitems/getTablePosition', { sorter: sorter })

            .then(response => {

                this.table.jumpToRow(id, response.data);
                
                this.closeForm();

            });

        },     

    },
}

</script>
