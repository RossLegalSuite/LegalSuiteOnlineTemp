<template>

<div :id="id" :class="modal ? 'modal': ''">
    
    <div :class="modal ? 'modal-dialog modal-dialog-centered modal-lg' : ''">

        <div :class="modal ? 'modal-content doclog-border':'card h-100 border-0'">

            <div :class="modal ? '':'card-header'">

                <div :class="modal ? 'modal-header doclog-bg' : 'd-flex justify-content-between'">

                    <div class="page-title">
                        <h3>
                            <span v-if="!editing">Item will be Added</span>
                            <span v-else>Item will be Changed</span>
                        </h3>
                        <i v-if="modal" title="Close this window" class="cp top-right fa fa-times-circle fa-2x text-white" data-dismiss="modal"></i>
                    </div>

                    <page-close-button v-if="!modal" @closeClicked="closeForm"/>

                </div>

            </div>

            <div class="card-body form-tab-body overflow-auto p-3">

                <div class="d-flex justify-content-between">

                    <form-tabs :tabs="tabs"/>

                    <div>

                        <drop-down-button 
                        v-show="activeTab === 'Document'"
                        :buttons="record.type === 'pdf' ? [
                            {text: 'Print', title: 'Print', callback: 'printDocument', class: 'btn-success', icon:'fa-print'},
                            {text: 'Email', title: 'Email', callback: 'emailDocument', class: 'btn-danger', icon:'fa-envelope'},
                            {text: 'Download', title: 'Download the file', callback: 'downloadFile', class: 'btn-primary', icon:'fa-download'},
                            {text: 'Change', title: 'Upload a new file and replace the existing one', callback: 'replaceFile', class: 'btn-secondary', icon:'fa-refresh'},
                        ] : [
                            {text: 'Email', title: 'Email', callback: 'emailDocument', class: 'btn-danger', icon:'fa-envelope'},
                            {text: 'Download', title: 'Download the file', callback: 'downloadFile', class: 'btn-primary', icon:'fa-download'},
                            {text: 'Change', title: 'Upload a new file and replace the existing one', callback: 'replaceFile', class: 'btn-secondary', icon:'fa-refresh'},
                        ]"
                        />

                    </div>

                </div>

                <div v-show="activeTab === 'General'" class="form-tab-content">

                    <div class="form-group row">

                        <div class="col-md-4">

                            <label>Date/Time</label>
                            <date-picker :readOnly="record.readOnly ? true: false" ref="datePickerComponent" v-model="record.formatteddatetime" :config="$root.dateTimePickerOptions"/>
                        </div>

                    </div>

                    <div class="form-group row">
                        <radio-buttons 
                            :popOver="`<h4>Direction</h4>
                            <p><strong>Outgoing:</strong> We generated this item.</p>
                            <p><strong>Incoming:</strong> This item was sent to us.</p>
                            <p><strong>Not Applicable:</strong> The Direction is Not Applicable to this item.</p>`"
                            _class="col-md-12" 
                            :record="record" 
                            column="direction" 
                            :buttons="[
                                {value:'Outgoing', text: 'Outgoing'},
                                {value:'Incoming', text: 'Incoming'},
                                {value:'Not Applicable', text: 'Not Applicable'},
                            ]" 
                            name="direction" 
                            label="Direction" 
                        />
                    </div>

                    <div class="form-group row">

                        <div class="col-md-6">

                            <label>Category</label>
                            <pop-over content="
                                <h4>Category</h4>
                                <p>Specify the Category the item belongs to.</p>"
                            />
                            <v-select
                                :options="$root.docLogCategories" 
                                label="description"
                                :clearable="false" 
                                :searchable="false" 
                                v-model="record.category"
                            />
                        </div>

                        <div class="col-md-6">

                            <label>Sub Category</label>
                            <pop-over content="
                                <h4>Sub Category</h4>
                                <p>Specify the Sub Category the item belongs to.
                                <p>Note: This is an optional field</p>"
                            />
                            <v-select
                                :options="$root.docLogSubCategories" 
                                label="description"
                                :clearable="false" 
                                :searchable="false" 
                                v-model="record.subcategory"
                            />
                        </div>


                    </div>



                    <div class="form-group row">
                        <radio-buttons 
                        :popOver="editing ? null : `<h4>Linked To</h4>
                            <p>Documents and letters are automatically added when you <em>assemble a document</em> for a Matter or Party, 
                            but you can also add any other Correspondence (including emails, images, audio and video) and link them to a Matter or Party
                            to ensure that <em>all</em> Correspondence is recorded and is easily accessible when viewing a particular Matter or Party.</p>`"
                        :popOverContainer="'#' + id"
                        _class="col-md-12" 
                        :record="record" 
                        column="parentType" 
                        :buttons="[
                            {value:'Matter', text: 'Matter', title: 'The Correspondence is linked to a specific Matter'},
                            {value:'Party', text: 'Party', title: 'The Correspondence is linked to a specific Party'},
                        ]" 
                        name="parentType" 
                        label="Linked To" 
                        @change="parentTypeChanged"
                        :error="errors.parentType"
                        />
                    </div>

                    <div class="form-group row">

                        <select-matter
                            v-show="record.parentType === 'Matter'"
                            _class="col-md-8"
                            :id="id + '-select-matter'"
                            title="The Matter this Item is linked to"
                            ref="doclog-select-matter" 
                            form-ref="doclog-select-matter"
                            :error="errors.matterid"
                        />

                        <select-party
                            v-show="record.parentType === 'Party'"
                            _class="col-md-8"
                            :id="id + '-select-party'"
                            title="The Party this Item is linked to"
                            ref="doclog-select-party" 
                            form-ref="doclog-select-party"
                            :error="errors.partyid"
                        />

                    </div>

                    <div class="form-group row">

                        <text-area _class="col-md-12" rows="4" cols="50" v-model="record.description" name="description" label="Description" :error="errors.description"/>

                    </div>  

                    <div v-if="errors.url && parentSelected" class="row">
                        <div class="col-md-12">
                            <div v-html="errors.url[0]" class="invalid-feedback"></div>
                        </div>  
                    </div>

                </div>  

                <div v-if="activeTab === 'Document'" 
                class="form-tab-content"
                :style="record.type === 'email' || record.type === 'pdf' ? 'display: flex; align-items: stretch; flex-flow: column;':''"
                >

                    <div v-if="record.type === 'email'" class="form-group row">
                        <text-input class="col-md-6" :readOnly="true" v-model="emailFrom" label="From"/>
                        <text-input class="col-md-6" :readOnly="true" v-model="emailTo" label="To"/>
                    </div>

                    <div v-if="record.type === 'email' && emailCc" class="form-group row">
                        <text-input class="col-md-12" :readOnly="true" v-model="emailCc" label="CC"/>
                    </div>

                    <div v-if="record.type === 'email'" class="form-group row">
                        <text-input class="col-md-12" :readOnly="true" v-model="emailSubject" label="Subject"/>
                    </div>

                    <div v-if="record.type === 'email'" 
                    style="flex: 1 1 auto; background: white; margin-right: 0px; margin-left: 0px;"
                    class="row boxed"
                    >
                        <div style="padding-left: 0;padding-right: 0" class="col-md-12">
                            <iframe class="iframe-container" id="doclog-form-message-iframe"></iframe>
                        </div>
                    </div>

                    <div v-else-if="record.type === 'pdf' && record.url" class="row"
                    style="flex: 1 1 auto; margin-right: 0px; margin-left: 0px;"    
                    >
                        <div style="padding-left: 0;padding-right: 0" class="col-md-12">
                            <iframe class="iframe-container" :id="_uid + '-pdf-iframe'"></iframe>
                        </div>
                    </div>

                    <div v-else-if="record.type === 'document' && record.url" class="row"
                    style="flex: 1 1 auto; margin-right: 0px; margin-left: 0px;"    
                    >
                        <div style="padding-left: 0;padding-right: 0" class="col-md-12">
                            <iframe class="iframe-container" :id="_uid + '-document-iframe'"></iframe>
                        </div>
                    </div>

                    

                    <img v-else-if="record.type === 'image'" :id="_uid + '-image'" class="img-fluid border" alt="Image">

                    <Media
                        v-else-if="record.type === 'audio'"
                        :id="_uid + '-audio'"
                        kind="audio"
                        :src="[]"
                        ref="audio-player"
                        :controls="true"
                    />

                    <Media
                        v-else-if="record.type === 'video'"
                        :id="_uid + '-video'"
                        kind="video"
                        :src="[]"
                        ref="video-player"
                        :style="{width: '100%'}"
                        :controls="true"
                    />


                    <div v-else-if="record.type !== 'pdf'
                    && record.type !== 'document'
                    && record.type !== 'image'
                    && record.type !== 'audio'
                    && record.type !== 'video'
                    && record.type !== 'email'"
                    style="min-height:50vh" class="row">

                        <div v-if="record.url" class="col-md-12">
                            <div class="centercenter">
                                <div style="text-align: center">
                                    <a :href="record.url" target="_blank">
                                        <h3 class="text-success">Click here to view this Document</h3>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <div v-else class="col-md-12">
                            <div class="centercenter">
                                <div style="text-align: center">
                                    <h4 class="text-danger">This document has not been uploaded to the Cloud.</h4>
                                    <button class="btn btn-primary form-button mt-3" type="button" @click="uploadToTheCloud">
                                        <span title="Upload this Item to the Cloud"><i class="fa fa-cloud-upload fa-lg mr-2"></i>Upload</span>
                                    </button>
                                    <div class="mt-2">Click here to upload it to the Cloud</div>

                                </div>
                            </div>
                        </div>

                    </div>

                </div>


                <div v-show="activeTab === 'Attachments'" 
                    class="form-tab-content"
                    style="background: white;"
                >

                    <div class="d-flex">

                        <div 
                            v-bind:key="attachment.id" 
                            v-for="attachment in emailAttachments"
                            class="program-icon"
                            @click="viewAttachment(attachment.url, attachment.id)"
                        >
                            <img :src="'/icons/file-types/' + attachment.imageFileName" :alt="attachment.imageFileName">
                            <div class="program-icon-text">{{attachment.fileName}}</div>
                        </div>

                    </div>

                    <div class="d-none">

                        <div 
                            v-bind:key="attachment.id" 
                            v-for="attachment in emailAttachments"
                        >
                            <a :id="id + '-attachment-icon-' + attachment.id" href="" target="_blank" rel="noopener noreferrer"></a>
                        </div>

                    </div>

                </div>


            </div>

            <div class="modal-footer justify-content-between">
                <div>

                    <upload-button 
                        v-show="!editing && activeTab === 'General'" 
                        :id="id" 
                        buttonText="Upload File"
                        title="Upload a document, image, audio file or any other type of file"
                        ref="upload-button"
                    />

                    <button v-show="editing" class="btn btn-primary form-button mr-3" type="button" @click="deleteClicked">
                        <span title="Delete this Item"><i class="fa fa-trash fa-lg mr-2"></i>Delete</span>
                    </button>

                </div>
                <div>
                    <button class="btn btn-yellow form-button mr-3" @click="okClicked(false)" type="button" title="Save the Item and continue editing"><i class="fa fa-check-square fa-lg mr-2"></i>Save</button>

                    <button class="btn btn-success form-button mr-3" @click="okClicked(true)" type="button" title="Save the Item and close the Window"><i class="fa fa-check-circle fa-lg mr-2"></i>OK</button>

                    <button v-if="savedFlag || editing" class="btn btn-danger form-button" @click="closeForm" type="button" title="Close this screen"><i class="fa fa-times-circle fa-lg mr-2"></i>Close</button>

                    <button v-else class="btn btn-danger form-button" @click="closeForm" type="button" title="Exit without saving"><i class="fa fa-times-circle fa-lg mr-2"></i>Cancel</button>
                </div>
            </div>

        </div>
    </div>
</div>

</template>    

<script>

//https://vue-select.org/guide/positioning.html#popper-js-integration
import { createPopper } from '@popperjs/core';

import { mapGetters } from 'vuex';
import FormTemplate from "@pages/form-template";
import modalTemplate from "@components/modals/modal-template";
import Media from '@dongido/vue-viaudio'

export default {

    mixins: [FormTemplate, modalTemplate],

    components: {
        SelectMatter: () => import("@pages/matters/SelectMatter"),
        SelectParty: () => import("@pages/parties/SelectParty"),
    },

    props: {
        resource: {type: String, default: 'DocLog' },
    },

    computed: {
        ...mapGetters(['currentMatter','currentParty']),
    },    

    watch: {

        activeTab(newValue) {

            if ( newValue === "Document" ) {

                this.setSourceContainer();

            }
        },

    },

    data() {
        return {
            fileType: null,
            parentSelected: false,
            placement: 'top',
            activeTab: 'General',
            emailTo: null,
            emailCc: null,
            emailFrom: null,
            emailSubject: null,
            emailAttachments: [],
            emailBody: null,
            gotEmail: false,
            tabs: [
                {
                    pageName: "General",
                    title: "Details",
                    iconClass: '',
                    visible: true,
                    active: true,
                },
                {
                    pageName: "Document",
                    title: "Document",
                    iconClass: '',
                    visible: false,
                    active: false,
                },
                {
                    pageName: "Attachments",
                    title: "Attachments",
                    iconClass: '',
                    visible: false,
                    active: false,
                },
            ],

        };
    },    

    methods: {

        editRecord(id) {

            this.emailTo = '';
            this.emailFrom = '';
            this.emailCc = '';
            this.emailSubject = '';
            this.emailAttachments = [];
            this.emailBody = '';

            this.gotEmail = false;

            this.unHideDocumentTab();
            this.hideAttachmentsTab();

            this.clearSourceContainers();

            axios.post('/doclog/get',{recordid: id})

            .then(async response => {

                this.record = response.data.data[0];

                if ( this.activeTab === 'Document') this.setSourceContainer();

                this.selectMatter.matter = {
                    id: this.record.matterid,
                    fileref: this.record.matterfileref,
                    description: this.record.matterdescription,
                };

                this.selectParty.partyName = this.record.partyname,

                await this.getFileType().then( ( response ) => {

                    //console.log("getFileType() returned",response.type, response.mimetype);

                    this.record.type = response.type;
                    this.record.fileType = response.mimetype;

                    console.log("getFileType this.record.type",this.record.type);

                    this.initFormData();

                }).catch( (error) => {

                    showError('Error',error)
                });

            });

        },

        initNewRecord() {

            this.emailTo = '';
            this.emailFrom = '';
            this.emailCc = '';
            this.emailSubject = '';
            this.emailAttachments = [];
            this.emailBody = '';

            this.gotEmail = false;

            this.hideDocumentTab();
            this.hideAttachmentsTab();

            this.setGeneralTab();

            this.clearSourceContainers();

            this.record = {
                employeeid: root.loggedInEmployeeId,
                parentType: 'Matter',
                type: 'document',
                direction: 'Outgoing',
                path: null,
                fileName: null,
                docxFile: null,
                matterid: this.currentMatter.id ? this.currentMatter.id : null,
                partyid: null, 
                description: null,
                date: null,
                time: null,
                formatteddatetime: moment().format(root.control.dateformat + ' HH:mm:ss'),
            };

            this.parentSelected = this.record.matterid ? true : false;

            this.selectMatter.matter = this.currentMatter.fileRef ? 
            {
                id: this.currentMatter.id,
                fileref: this.currentMatter.fileRef,
                description: this.currentMatter.description,
            } : {
                id: null,
                fileref: '',
                description: '',
            };

            this.selectParty.partyName =  this.currentParty.code ? this.currentParty.code + ' - ' + this.currentParty.name : null;

            this.initFormData();

            setTimeout(() => $('#' + this.id + ' textarea[name="description"]').focus() );

        },

        initFormData() {

            this.selectMatter.callingComponent = this;
            this.selectParty.callingComponent = this;

            this.setDocumentTabTitle();

            this.displayForm();

        },

        getFileType() {

            return new Promise((resolve, reject) => {

                if (this.record.emailflag == '1') {
                    resolve('email','');
                } else if (this.record.emailflag == '2') {
                    resolve('sms','');
                } else {

                    axios.post('/utils/getFileType',{filename: this.record.savedname })
        
                    .then(response => {

                        if (response.data.errors) {

                            reject(response.data.errors);

                        } else {

                            resolve(response.data.data);
                        }

                    });

                }

            });

        },

        displayEmailMessage() {

            if (this.gotEmail) {
                $('#doclog-form-message-iframe')[0].srcdoc = this.emailBody;
                return;
            }

            $('#doclog-form-message-iframe')[0].srcdoc = `
                <html style="height: 100%;"><head></head><body style="height: 100%;">            
                <div style="margin: 0px;justify-content: center; align-items: center; display: flex; height: 100%;">
                    <div style="text-align: center">
                        <h3 style="color:forestgreen">Loading contents...Please wait</h3>
                    </div>
                </div>
                </body>
                </html>
            `;


            axios.post('/mail/getCorrespondenceEmail', this.record)

            .then(response => {

                if (response.data.error) {

                    showError('Error getting Correspondence Email',response.data.error);

                } else {

                    this.gotEmail = true;

                    this.emailTo = response.data.to;
                    this.emailFrom = response.data.from;
                    this.emailCc = response.data.cc;
                    this.emailSubject = response.data.subject;
                    this.emailAttachments = response.data.attachments;

                    if (this.emailAttachments.length) this.unHideAttachmentsTab();

                    setTimeout(() => {
                        
                        this.emailBody = $('#doclog-form-message-iframe')[0].srcdoc = response.data.body;
                        
                    });

                }
            });

        },


        viewAttachment( url, id ) {

            let encodedUrl = encodeURI(url);

            $('#' + this.id + '-attachment-icon-' + id).attr('href',encodedUrl);

            $('#' + this.id + '-attachment-icon-' + id)[0].click();

        },

        uploadToTheCloud() {

            root.$snotify.simple(this.record.description, 'Uploading', { timeout: 0, icon: 'img/cogs.gif' });

            axios.post('/doclog/upload/' + this.record.recordid)

            .then(response => {

                if (response.data.errors) {

                    showError('Error',response.data.errors);

                } else {

                    root.$snotify.clear();

                    this.record.url = response.data.data.url;

                    this.setSourceContainer();

                }

            });

        },

        async uploadFile(file) {

            // Test different file type from here: https://file-examples.com/

            //console.log('file.type',file.type );

            let mimeType = root.mimeTypeHelper(file.type);

            this.fileType = mimeType.type;
            this.record.type = mimeType.description;

            this.record.fileName = file.name;
            this.record.fileType = file.type;
            this.record.description = this.record.description || file.name;

            let folder = this.getFolder();

            this.setDocumentTabTitle();

            root.$snotify.simple(file.name, 'Uploading', { timeout: 0, icon: 'img/cogs.gif' });

            var formData = new FormData();

            formData.append("file", file);
            formData.append("fileName", file.name);
            formData.append("folder", folder);

            let response = await axios.post('/file/upload', formData, {
                headers: {'Content-Type': 'multipart/form-data'}
            });

            if (response.data.error) {

                root.$snotify.clear();

                showError('Error uploading document',response.data.error);

            } else {

                this.record.path = response.data.path;

                if ( this.fileType === 'Word Document' ) {

                    $('.snotify-simple .snotifyToast__title').text('Converting');
                    $('.snotify-simple .snotifyToast__body').text('Converting document to PDF');

                    this.record.docxFile = response.data.url;

                    const convertOptions = {
                        destinationPath: folder,
                        source: this.record.docxFile,
                        fileName: file.name,
                        sourceLocation: 'cloud',
                    };

                    let convertResponse = await convertToPdf(convertOptions);

                    root.$snotify.clear();

                    if ( convertResponse.error ) {

                        showError('PDF Conversion Error',convertResponse.error);

                    } else {

                        this.record.url = convertResponse.url;

                        this.unHideDocumentTab();

                        this.errors = {};

                    }

                } else {
                    
                    root.$snotify.clear();

                    this.record.url = response.data.url;

                    this.unHideDocumentTab();
                    
                    this.errors = {};
                }

                this.setDocumentTab();

            }

        },

        getFolder() {

            if ( this.record.parentType === 'Matter' ) {
                return 'matters/' + this.record.matterid + '/correspondence';
            } else if ( this.record.parentType === 'Party' ) {
                return 'parties/' + this.record.partyid + '/correspondence';
            } else {
                showError('System Error', 'Unable to determine the correct folder to save the Correspondence attachment. Saving it in the General folder.');
                return 'general/correspondence';
            }

        },

        setSourceContainer() {

            // if ( !this.record.url ) {

            //     showError('Error','This Item does not have a url');

            // } else {

                setTimeout(() => {

                    if ( this.record.type === 'audio' || this.record.type === 'video') {

                        this.$refs[this.record.type.toLowerCase() + '-player'].src = [this.record.url];

                    } else if ( this.record.type === 'pdf') {
                    
                        $('#' + this._uid + '-pdf-iframe')[0].src = this.record.url;
                        
                    } else if ( this.record.type === 'document') {

                        console.log('Office url','https://view.officeapps.live.com/op/embed.aspx?src=' + this.record.url);
                    
                        $('#' + this._uid + '-document-iframe')[0].src = 'https://view.officeapps.live.com/op/embed.aspx?src=' + this.record.url;
                        
                    } else if ( this.record.type === 'image') {
                    
                        $('#' + this._uid + '-image').attr('src',this.record.url);

                    } else if ( this.record.type === 'email') {
                    
                        this.displayEmailMessage();

                    }

                });
            //}
        },

        clearSourceContainers() {

            if ( $('#' + this._uid + '-pdf-iframe').length) $('#' + this._uid + '-pdf-iframe')[0].src = '';
            if ( this.$refs['audio-player'] ) this.$refs['audio-player'].src = [];
            if ( this.$refs['video-player'] ) this.$refs['video-player'].src = [];

        },

        setGeneralTab() {
            this.activeTab = 'General';
            this.tabs[0].active = true;
            this.tabs[1].active = false;
            this.tabs[2].active = false;
        },

        setDocumentTab() {

            if ( this.activeTab === 'Document' ) {

                this.setSourceContainer();

            } else {

                this.activeTab = 'Document';
                this.tabs[1].active = true;
                this.tabs[0].active = false;
                this.tabs[2].active = false;

            }
        },

        setDocumentTabTitle() {

            if ( this.record.type === 'other' ) {

                this.tabs[1].title = this.userFriendlyFileType(this.record.fileType);

            } else if ( this.record.type === 'pdf' ) {

                this.tabs[1].title = 'Pdf Document';

            } else {

                this.tabs[1].title = this.record.type.capitalize();
            }

        },

        userFriendlyFileType( type) {

            let returnData = type;

            if ( type.indexOf('application/vnd.') === 0 ) {

                returnData = type.substring(16).capitalize();

            } else if ( type.indexOf('application/') === 0 ) {

                returnData = type.substring(12).capitalize();

            } else if ( type.indexOf('image/') === 0 ) {

                returnData = type.substring(6).capitalize() + ' Image';

            }

            return returnData;

        },

        hideDocumentTab() {
            this.tabs[1].visible = false;
        },

        unHideDocumentTab() {
            this.tabs[1].visible = true;
        },

        hideAttachmentsTab() {
            
            if ( this.tabs[2].visible ) {
                this.setGeneralTab();
                this.tabs[2].visible = false;
            }
        },

        unHideAttachmentsTab() {
            this.tabs[2].visible = true;
        },

        replaceFile() {
            this.$refs['upload-button'].selectFile();
        },

        downloadFile() {
            root.downloadObject(this.record.docxFile || this.record.url, this.record.fileType);
        },

        parentTypeChanged(newValue) {

            if ( newValue === 'Matter' ) {
                this.parentSelected = this.record.matterid ? true : false;
            } else if ( newValue === 'Party' ) {
                this.parentSelected = this.record.partyid ? true : false;
            }

        },

        matterSelected(selectedRecord) {
            this.record.matterid = selectedRecord.recordid;
            this.record.partyid = 0;
            this.parentSelected = true;
            this.record.parentType = 'Matter';
        },

        partySelected(selectedRecord) {
            this.record.partyid = selectedRecord.recordid;
            this.record.matterid = 0;
            this.parentSelected = true;
            this.record.parentType = 'Party';
        },

        okClicked( closeFlag = true ) {

            let stringLength = this.record.formatteddatetime.length;
            this.record.date = this.record.formatteddatetime.slice(0, stringLength-9);
            this.record.time = this.record.formatteddatetime.slice(-8);

            console.log("this.record.date",this.record.date);
            console.log("this.record.time",this.record.time);

            //this.record.date = this.record.formatteddate;
            //this.record.matterid = this.record.parentType === 'Matter' && this.selectMatter.matter ? this.selectMatter.matter.id : null;
            //this.record.partyid = this.record.parentType === 'Party' && this.selectParty.party ? this.selectParty.party.id : null;

            axios.post('/doclog/store', this.record)
            
            .then(response => {

                if (response.data.errors) {

                    this.setGeneralTab();

                    showError( 'Error', response.data.errors );

                } else {

                    this.errors = {};

                    if (closeFlag) {

                        this.highlightRow(response.data.data[0].recordid, {
                            where: ["date,<,' + response.data.data[0].date","time,<,' + response.data.data[0].time"],
                            orderBy: ['date','time'],
                        });

                        this.hide();

                    } else {
                        this.savedFlag = true;
                    }

                }

            }).catch(error => { showError('Error saving ' + this.table.singular, error); });

        },


        withPopper (dropdownList, component, {width}) {

            dropdownList.style.width = width;

            const popper = createPopper(component.$refs.toggle, dropdownList, {
            placement: this.placement,
            modifiers: [
                { name: 'offset', options: {offset: [0, -1] } },
                {
                    name: 'toggleClass',
                    enabled: true,
                    phase: 'write',
                    fn ({state}) {
                        component.$el.classList.toggle('drop-up', state.placement === 'top')
                    },
                }]
            });

            return () => popper.destroy();
        },

        printDocument() {

            this.$root.previewPdf.document = this.record;

            if ( this.record.type === 'image') {

                this.$root.previewPdf.title = 'Image: ' + this.record.fileName;

                this.$root.previewPdf.documentType = 'Image';
                this.$root.previewPdf.documentPath = this.record.url; //Being watched: To load the iFrame

                this.$root.previewPdf.show();

            } else {

                this.$root.previewPdf.printDocument();
            }

        },

        emailDocument() {
            this.$root.previewPdf.document = this.record;
            this.$root.previewPdf.emailDocument( this.record.type, this.record.fileName );
        },
    },

}

</script>
<style>
.v-select.drop-up.vs--open .vs__dropdown-toggle {
    border-radius: 0 0 4px 4px;
    border-top-color: transparent;
    border-bottom-color: rgba(60, 60, 60, 0.26);
}

[data-popper-placement='top'] {
    border-radius: 4px 4px 0 0;
    border-top-style: solid;
    border-bottom-style: none;
    box-shadow: 0 -3px 6px rgba(0, 0, 0, 0.15)
}
</style>